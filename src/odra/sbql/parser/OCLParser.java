
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Aug 11 13:27:45 EDT 2014
//----------------------------------------------------

package odra.sbql.parser;

import java_cup.runtime.*;
import java.util.Vector;
import java.util.Date;
import odra.sbql.ast.*;
import odra.sbql.ast.terminals.*;
import odra.sbql.ast.expressions.*;
import odra.sbql.ast.declarations.*;
import odra.sbql.ast.statements.*;
import odra.exceptions.*;
import odra.sbql.ast.ParserException;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Aug 11 13:27:45 EDT 2014
  */
public class OCLParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public OCLParser() {super();}

  /** Constructor which sets the default scanner. */
  public OCLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public OCLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\221\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\006\000\002\004\005\000\002\004\005" +
    "\000\002\040\003\000\002\040\004\000\002\040\003\000" +
    "\002\041\004\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\004\000\002\041\004\000\002\041\004" +
    "\000\002\041\004\000\002\041\004\000\002\041\004\000" +
    "\002\041\004\000\002\041\004\000\002\041\003\000\002" +
    "\041\003\000\002\041\004\000\002\035\005\000\002\037" +
    "\003\000\002\037\004\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\006\007\000\002\006\011\000\002\007\011\000\002" +
    "\007\014\000\002\010\006\000\002\010\007\000\002\011" +
    "\013\000\002\032\005\000\002\032\011\000\002\033\005" +
    "\000\002\033\011\000\002\012\007\000\002\013\010\000" +
    "\002\014\005\000\002\016\007\000\002\016\010\000\002" +
    "\015\004\000\002\017\003\000\002\017\004\000\002\020" +
    "\003\000\002\021\004\000\002\021\007\000\002\022\003" +
    "\000\002\022\005\000\002\023\005\000\002\023\006\000" +
    "\002\023\005\000\002\024\005\000\002\025\005\000\002" +
    "\026\004\000\002\027\007\000\002\030\005\000\002\030" +
    "\007\000\002\031\003\000\002\031\005\000\002\034\003" +
    "\000\002\034\003\000\002\036\005\000\002\036\007\000" +
    "\002\056\003\000\002\056\003\000\002\057\011\000\002" +
    "\060\005\000\002\060\005\000\002\060\003\000\002\042" +
    "\006\000\002\042\011\000\002\042\005\000\002\042\005" +
    "\000\002\042\005\000\002\042\005\000\002\042\005\000" +
    "\002\042\005\000\002\042\005\000\002\042\005\000\002" +
    "\042\005\000\002\042\005\000\002\042\005\000\002\042" +
    "\004\000\002\042\004\000\002\042\012\000\002\042\014" +
    "\000\002\042\014\000\002\042\007\000\002\042\011\000" +
    "\002\042\010\000\002\042\005\000\002\042\003\000\002" +
    "\042\005\000\002\042\011\000\002\042\006\000\002\042" +
    "\003\000\002\042\003\000\002\042\005\000\002\043\005" +
    "\000\002\043\005\000\002\044\003\000\002\044\003\000" +
    "\002\044\003\000\002\045\005\000\002\045\006\000\002" +
    "\046\003\000\002\046\005\000\002\047\003\000\002\047" +
    "\003\000\002\050\005\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\051\003\000\002\051\003\000" +
    "\002\052\006\000\002\053\003\000\002\053\003\000\002" +
    "\054\005\000\002\054\007\000\002\054\005\000\002\055" +
    "\003\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\061\006\000\002\062\005\000\002\062\006\000" +
    "\002\063\003\000\002\063\005\000\002\064\002\000\002" +
    "\064\004\000\002\065\002\000\002\065\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0146\000\056\004\055\006\056\022\013\042\025\046" +
    "\047\051\012\052\054\053\070\054\043\056\023\057\034" +
    "\060\022\073\005\075\057\077\031\101\061\102\041\103" +
    "\032\104\033\105\063\106\004\107\024\001\002\000\114" +
    "\005\uff85\007\uff85\011\uff85\012\uff85\014\uff85\015\uff85\016" +
    "\uff85\017\uff85\021\uff85\022\uff85\023\uff85\024\uff85\025\uff85" +
    "\026\uff85\027\uff85\030\uff85\031\uff85\032\uff85\033\uff85\034" +
    "\uff85\035\uff85\036\uff85\037\uff85\040\uff85\041\uff85\043\uff85" +
    "\044\uff85\045\uff85\062\uff85\063\uff85\065\uff85\066\uff85\067" +
    "\uff85\071\uff85\072\uff85\076\uff85\105\uff85\001\002\000\004" +
    "\006\u0146\001\002\000\070\002\uffe8\004\uffe8\006\uffe8\007" +
    "\uffe8\022\uffe8\042\uffe8\044\uffe8\046\uffe8\047\uffe8\050\uffe8" +
    "\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8\057" +
    "\uffe8\060\uffe8\073\uffe8\075\uffe8\101\uffe8\102\uffe8\103\uffe8" +
    "\104\uffe8\105\uffe8\106\uffe8\107\uffe8\001\002\000\070\002" +
    "\ufff7\004\ufff7\006\ufff7\007\ufff7\022\ufff7\042\ufff7\044\ufff7" +
    "\046\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7\054" +
    "\ufff7\055\ufff7\056\ufff7\057\ufff7\060\ufff7\073\ufff7\075\ufff7" +
    "\101\ufff7\102\ufff7\103\ufff7\104\ufff7\105\ufff7\106\ufff7\107" +
    "\ufff7\001\002\000\070\002\ufff6\004\ufff6\006\ufff6\007\ufff6" +
    "\022\ufff6\042\ufff6\044\ufff6\046\ufff6\047\ufff6\050\ufff6\051" +
    "\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6\057\ufff6" +
    "\060\ufff6\073\ufff6\075\ufff6\101\ufff6\102\ufff6\103\ufff6\104" +
    "\ufff6\105\ufff6\106\ufff6\107\ufff6\001\002\000\112\005\uff91" +
    "\007\uff91\011\uff91\014\uff91\015\uff91\016\uff91\017\uff91\021" +
    "\uff91\022\uff91\023\uff91\024\uff91\025\uff91\026\uff91\027\uff91" +
    "\030\uff91\031\uff91\032\uff91\033\uff91\034\uff91\035\uff91\036" +
    "\uff91\037\uff91\040\uff91\041\uff91\043\uff91\044\uff91\045\uff91" +
    "\062\uff91\063\uff91\065\uff91\066\uff91\067\uff91\071\uff91\072" +
    "\uff91\076\uff91\105\uff91\001\002\000\004\004\u013e\001\002" +
    "\000\032\004\055\022\013\042\075\073\005\075\057\101" +
    "\061\102\041\103\032\104\033\105\126\106\004\107\024" +
    "\001\002\000\112\005\uff92\007\uff92\011\uff92\014\uff92\015" +
    "\uff92\016\uff92\017\uff92\021\uff92\022\uff92\023\uff92\024\uff92" +
    "\025\uff92\026\uff92\027\uff92\030\uff92\031\uff92\032\uff92\033" +
    "\uff92\034\uff92\035\uff92\036\uff92\037\uff92\040\uff92\041\uff92" +
    "\043\uff92\044\uff92\045\uff92\062\uff92\063\uff92\065\uff92\066" +
    "\uff92\067\uff92\071\uff92\072\uff92\076\uff92\105\uff92\001\002" +
    "\000\004\014\u013c\001\002\000\004\002\uffff\001\002\000" +
    "\004\014\u013b\001\002\000\070\002\ufff5\004\ufff5\006\ufff5" +
    "\007\ufff5\022\ufff5\042\ufff5\044\ufff5\046\ufff5\047\ufff5\050" +
    "\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5" +
    "\057\ufff5\060\ufff5\073\ufff5\075\ufff5\101\ufff5\102\ufff5\103" +
    "\ufff5\104\ufff5\105\ufff5\106\ufff5\107\ufff5\001\002\000\004" +
    "\014\u013a\001\002\000\004\014\uffcb\001\002\000\032\004" +
    "\055\022\013\042\075\073\005\075\057\101\061\102\041" +
    "\103\032\104\033\105\074\106\004\107\024\001\002\000" +
    "\004\006\u012e\001\002\000\032\004\u0128\022\013\042\075" +
    "\073\005\075\057\101\061\102\041\103\032\104\033\105" +
    "\126\106\004\107\024\001\002\000\004\014\u0127\001\002" +
    "\000\070\002\ufff9\004\ufff9\006\ufff9\007\ufff9\022\ufff9\042" +
    "\ufff9\044\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9" +
    "\053\ufff9\054\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9\073" +
    "\ufff9\075\ufff9\101\ufff9\102\ufff9\103\ufff9\104\ufff9\105\ufff9" +
    "\106\ufff9\107\ufff9\001\002\000\004\014\u0126\001\002\000" +
    "\004\105\u011f\001\002\000\114\005\uff86\007\uff86\011\uff86" +
    "\012\uff86\014\uff86\015\uff86\016\uff86\017\uff86\021\uff86\022" +
    "\uff86\023\uff86\024\uff86\025\uff86\026\uff86\027\uff86\030\uff86" +
    "\031\uff86\032\uff86\033\uff86\034\uff86\035\uff86\036\uff86\037" +
    "\uff86\040\uff86\041\uff86\043\uff86\044\uff86\045\uff86\062\uff86" +
    "\063\uff86\065\uff86\066\uff86\067\uff86\071\uff86\072\uff86\076" +
    "\uff86\105\uff86\001\002\000\114\005\uff87\007\uff87\011\uff87" +
    "\012\uff87\014\uff87\015\uff87\016\uff87\017\uff87\021\uff87\022" +
    "\uff87\023\uff87\024\uff87\025\uff87\026\uff87\027\uff87\030\uff87" +
    "\031\uff87\032\uff87\033\uff87\034\uff87\035\uff87\036\uff87\037" +
    "\uff87\040\uff87\041\uff87\043\uff87\044\uff87\045\uff87\062\uff87" +
    "\063\uff87\065\uff87\066\uff87\067\uff87\071\uff87\072\uff87\076" +
    "\uff87\105\uff87\001\002\000\034\004\055\014\uffcd\022\013" +
    "\042\075\073\005\075\057\101\061\102\041\103\032\104" +
    "\033\105\074\106\004\107\024\001\002\000\112\005\uff96" +
    "\007\uff96\011\uff96\014\uff96\015\uff96\016\uff96\017\uff96\021" +
    "\uff96\022\uff96\023\uff96\024\uff96\025\uff96\026\uff96\027\uff96" +
    "\030\uff96\031\uff96\032\uff96\033\uff96\034\uff96\035\uff96\036" +
    "\uff96\037\uff96\040\uff96\041\uff96\043\uff96\044\uff96\045\uff96" +
    "\062\uff96\063\uff96\065\uff96\066\uff96\067\uff96\071\uff96\072" +
    "\uff96\076\uff96\105\uff96\001\002\000\112\005\uff90\007\uff90" +
    "\011\uff90\014\uff90\015\uff90\016\uff90\017\uff90\021\uff90\022" +
    "\uff90\023\uff90\024\uff90\025\uff90\026\uff90\027\uff90\030\uff90" +
    "\031\uff90\032\uff90\033\uff90\034\uff90\035\uff90\036\uff90\037" +
    "\uff90\040\uff90\041\uff90\043\uff90\044\uff90\045\uff90\062\uff90" +
    "\063\uff90\065\uff90\066\uff90\067\uff90\071\uff90\072\uff90\076" +
    "\uff90\105\uff90\001\002\000\004\014\u011b\001\002\000\004" +
    "\014\u011a\001\002\000\114\005\uff84\007\uff84\011\uff84\012" +
    "\uff84\014\uff84\015\uff84\016\uff84\017\uff84\021\uff84\022\uff84" +
    "\023\uff84\024\uff84\025\uff84\026\uff84\027\uff84\030\uff84\031" +
    "\uff84\032\uff84\033\uff84\034\uff84\035\uff84\036\uff84\037\uff84" +
    "\040\uff84\041\uff84\043\uff84\044\uff84\045\uff84\062\uff84\063" +
    "\uff84\065\uff84\066\uff84\067\uff84\071\uff84\072\uff84\076\uff84" +
    "\105\uff84\001\002\000\066\014\uffbb\017\111\021\112\022" +
    "\101\023\114\024\104\025\110\026\107\027\105\030\102" +
    "\031\106\032\115\033\113\035\uffbb\036\uffbb\037\uffbb\040" +
    "\uffbb\041\uffbb\062\uffbb\063\uffbb\065\uffbb\066\u0112\067\u0113" +
    "\071\uffbb\072\uffbb\105\103\001\002\000\054\004\055\006" +
    "\056\022\013\042\025\046\047\051\012\052\054\053\070" +
    "\054\043\056\023\057\034\060\022\073\005\075\057\101" +
    "\061\102\041\103\032\104\033\105\063\106\004\107\024" +
    "\001\002\000\070\002\ufff4\004\ufff4\006\ufff4\007\ufff4\022" +
    "\ufff4\042\ufff4\044\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4" +
    "\052\ufff4\053\ufff4\054\ufff4\055\ufff4\056\ufff4\057\ufff4\060" +
    "\ufff4\073\ufff4\075\ufff4\101\ufff4\102\ufff4\103\ufff4\104\ufff4" +
    "\105\ufff4\106\ufff4\107\ufff4\001\002\000\004\002\000\001" +
    "\002\000\070\002\ufffb\004\ufffb\006\ufffb\007\ufffb\022\ufffb" +
    "\042\ufffb\044\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\052" +
    "\ufffb\053\ufffb\054\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb" +
    "\073\ufffb\075\ufffb\101\ufffb\102\ufffb\103\ufffb\104\ufffb\105" +
    "\ufffb\106\ufffb\107\ufffb\001\002\000\004\004\372\001\002" +
    "\000\070\002\ufff3\004\ufff3\006\ufff3\007\ufff3\022\ufff3\042" +
    "\ufff3\044\ufff3\046\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3" +
    "\053\ufff3\054\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3\073" +
    "\ufff3\075\ufff3\101\ufff3\102\ufff3\103\ufff3\104\ufff3\105\ufff3" +
    "\106\ufff3\107\ufff3\001\002\000\034\005\uffba\007\uffba\014" +
    "\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\062\uffba" +
    "\063\uffba\065\uffba\071\uffba\072\uffba\001\002\000\030\014" +
    "\335\035\334\036\342\037\343\040\331\041\341\062\340" +
    "\063\333\065\332\071\337\072\336\001\002\000\004\002" +
    "\330\001\002\000\004\004\324\001\002\000\032\004\055" +
    "\022\013\042\075\073\005\075\057\101\061\102\041\103" +
    "\032\104\033\105\126\106\004\107\024\001\002\000\054" +
    "\004\055\006\056\022\013\042\025\046\047\051\012\052" +
    "\054\053\070\054\043\056\023\057\034\060\022\073\005" +
    "\075\057\101\061\102\041\103\032\104\033\105\063\106" +
    "\004\107\024\001\002\000\004\105\160\001\002\000\004" +
    "\014\313\001\002\000\114\005\uff88\007\uff88\011\uff88\012" +
    "\uff88\014\uff88\015\uff88\016\uff88\017\uff88\021\uff88\022\uff88" +
    "\023\uff88\024\uff88\025\uff88\026\uff88\027\uff88\030\uff88\031" +
    "\uff88\032\uff88\033\uff88\034\uff88\035\uff88\036\uff88\037\uff88" +
    "\040\uff88\041\uff88\043\uff88\044\uff88\045\uff88\062\uff88\063" +
    "\uff88\065\uff88\066\uff88\067\uff88\071\uff88\072\uff88\076\uff88" +
    "\105\uff88\001\002\000\070\002\uffe9\004\uffe9\006\uffe9\007" +
    "\uffe9\022\uffe9\042\uffe9\044\uffe9\046\uffe9\047\uffe9\050\uffe9" +
    "\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057" +
    "\uffe9\060\uffe9\073\uffe9\075\uffe9\101\uffe9\102\uffe9\103\uffe9" +
    "\104\uffe9\105\uffe9\106\uffe9\107\uffe9\001\002\000\120\004" +
    "\131\012\271\013\132\014\uff9b\017\uff9b\021\uff9b\022\uff9b" +
    "\023\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031" +
    "\uff9b\032\uff9b\033\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b" +
    "\041\uff9b\042\075\061\244\062\uff9b\063\uff9b\065\uff9b\066" +
    "\uff9b\067\uff9b\071\uff9b\072\uff9b\073\005\075\057\101\061" +
    "\102\041\103\032\104\033\105\126\106\004\107\024\001" +
    "\002\000\004\014\270\001\002\000\004\014\267\001\002" +
    "\000\116\004\264\005\uff97\007\uff97\011\uff97\013\212\014" +
    "\uff97\015\uff97\016\uff97\017\uff97\021\uff97\022\uff97\023\uff97" +
    "\024\uff97\025\uff97\026\uff97\027\uff97\030\uff97\031\uff97\032" +
    "\uff97\033\uff97\034\uff97\035\uff97\036\uff97\037\uff97\040\uff97" +
    "\041\uff97\043\uff97\044\uff97\045\uff97\062\uff97\063\uff97\065" +
    "\uff97\066\uff97\067\uff97\071\uff97\072\uff97\076\uff97\105\uff97" +
    "\001\002\000\070\002\ufff2\004\ufff2\006\ufff2\007\ufff2\022" +
    "\ufff2\042\ufff2\044\ufff2\046\ufff2\047\ufff2\050\ufff2\051\ufff2" +
    "\052\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2\060" +
    "\ufff2\073\ufff2\075\ufff2\101\ufff2\102\ufff2\103\ufff2\104\ufff2" +
    "\105\ufff2\106\ufff2\107\ufff2\001\002\000\054\004\055\006" +
    "\056\022\013\042\025\046\047\051\012\052\054\053\070" +
    "\054\043\056\023\057\034\060\022\073\005\075\057\101" +
    "\061\102\041\103\032\104\033\105\063\106\004\107\024" +
    "\001\002\000\004\052\072\001\002\000\004\004\073\001" +
    "\002\000\032\004\055\022\013\042\075\073\005\075\057" +
    "\101\061\102\041\103\032\104\033\105\074\106\004\107" +
    "\024\001\002\000\072\004\131\005\uff9b\007\uff9b\013\132" +
    "\014\uff9b\017\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\025" +
    "\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b" +
    "\042\075\061\244\073\005\075\057\101\061\102\041\103" +
    "\032\104\033\105\126\106\004\107\024\001\002\000\032" +
    "\004\055\022\013\042\075\073\005\075\057\101\061\102" +
    "\041\103\032\104\033\105\126\106\004\107\024\001\002" +
    "\000\042\005\uffbb\007\uffbb\014\uffbb\017\111\021\112\022" +
    "\101\023\114\024\104\025\110\026\107\027\105\030\102" +
    "\031\106\032\115\033\113\105\103\001\002\000\004\005" +
    "\100\001\002\000\070\002\uffd2\004\uffd2\006\uffd2\007\uffd2" +
    "\022\uffd2\042\uffd2\044\uffd2\046\uffd2\047\uffd2\050\uffd2\051" +
    "\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2" +
    "\060\uffd2\073\uffd2\075\uffd2\101\uffd2\102\uffd2\103\uffd2\104" +
    "\uffd2\105\uffd2\106\uffd2\107\uffd2\001\002\000\032\004\055" +
    "\022\013\042\075\073\005\075\057\101\061\102\041\103" +
    "\032\104\033\105\126\106\004\107\024\001\002\000\032" +
    "\004\055\022\013\042\075\073\005\075\057\101\061\102" +
    "\041\103\032\104\033\105\126\106\004\107\024\001\002" +
    "\000\032\004\055\022\013\042\075\073\005\075\057\101" +
    "\061\102\041\103\032\104\033\105\126\106\004\107\024" +
    "\001\002\000\032\004\055\022\013\042\075\073\005\075" +
    "\057\101\061\102\041\103\032\104\033\105\126\106\004" +
    "\107\024\001\002\000\032\004\055\022\013\042\075\073" +
    "\005\075\057\101\061\102\041\103\032\104\033\105\126" +
    "\106\004\107\024\001\002\000\032\004\055\022\013\042" +
    "\075\073\005\075\057\101\061\102\041\103\032\104\033" +
    "\105\126\106\004\107\024\001\002\000\032\004\055\022" +
    "\013\042\075\073\005\075\057\101\061\102\041\103\032" +
    "\104\033\105\126\106\004\107\024\001\002\000\032\004" +
    "\055\022\013\042\075\073\005\075\057\101\061\102\041" +
    "\103\032\104\033\105\126\106\004\107\024\001\002\000" +
    "\032\004\055\022\013\042\075\073\005\075\057\101\061" +
    "\102\041\103\032\104\033\105\126\106\004\107\024\001" +
    "\002\000\032\004\055\022\013\042\075\073\005\075\057" +
    "\101\061\102\041\103\032\104\033\105\126\106\004\107" +
    "\024\001\002\000\004\105\216\001\002\000\032\004\055" +
    "\022\013\042\075\073\005\075\057\101\061\102\041\103" +
    "\032\104\033\105\126\106\004\107\024\001\002\000\004" +
    "\105\116\001\002\000\004\004\117\001\002\000\034\004" +
    "\055\005\122\022\013\042\075\073\005\075\057\101\061" +
    "\102\041\103\032\104\033\105\120\106\004\107\024\001" +
    "\002\000\072\004\131\005\uff9b\012\166\013\132\015\uff9b" +
    "\016\uff81\017\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\025" +
    "\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b" +
    "\042\075\073\005\075\057\101\061\102\041\103\032\104" +
    "\033\105\126\106\004\107\024\001\002\000\006\015\157" +
    "\016\uff82\001\002\000\112\005\uff9f\007\uff9f\011\uff9f\014" +
    "\uff9f\015\uff9f\016\uff9f\017\uff9f\021\uff9f\022\uff9f\023\uff9f" +
    "\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032" +
    "\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f" +
    "\041\uff9f\043\uff9f\044\uff9f\045\uff9f\062\uff9f\063\uff9f\065" +
    "\uff9f\066\uff9f\067\uff9f\071\uff9f\072\uff9f\076\uff9f\105\uff9f" +
    "\001\002\000\040\005\uff72\015\150\017\111\021\112\022" +
    "\101\023\114\024\104\025\110\026\107\027\105\030\102" +
    "\031\106\032\115\033\113\105\103\001\002\000\004\016" +
    "\125\001\002\000\032\004\055\022\013\042\075\073\005" +
    "\075\057\101\061\102\041\103\032\104\033\105\126\106" +
    "\004\107\024\001\002\000\140\004\131\005\uff9b\007\uff9b" +
    "\011\uff9b\013\132\014\uff9b\015\uff9b\016\uff9b\017\uff9b\021" +
    "\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b" +
    "\030\uff9b\031\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b\036" +
    "\uff9b\037\uff9b\040\uff9b\041\uff9b\042\075\043\uff9b\044\uff9b" +
    "\045\uff9b\062\uff9b\063\uff9b\065\uff9b\066\uff9b\067\uff9b\071" +
    "\uff9b\072\uff9b\073\005\075\057\076\uff9b\101\061\102\041" +
    "\103\032\104\033\105\126\106\004\107\024\001\002\000" +
    "\036\005\130\017\111\021\112\022\101\023\114\024\104" +
    "\025\110\026\107\027\105\030\102\031\106\032\115\033" +
    "\113\105\103\001\002\000\112\005\uffa2\007\uffa2\011\uffa2" +
    "\014\uffa2\015\uffa2\016\uffa2\017\uffa2\021\uffa2\022\uffa2\023" +
    "\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2" +
    "\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040" +
    "\uffa2\041\uffa2\043\uffa2\044\uffa2\045\uffa2\062\uffa2\063\uffa2" +
    "\065\uffa2\066\uffa2\067\uffa2\071\uffa2\072\uffa2\076\uffa2\105" +
    "\uffa2\001\002\000\034\004\055\005\135\022\013\042\075" +
    "\073\005\075\057\101\061\102\041\103\032\104\033\105" +
    "\126\106\004\107\024\001\002\000\004\105\134\001\002" +
    "\000\112\005\uffa3\007\uffa3\011\uffa3\014\uffa3\015\uffa3\016" +
    "\uffa3\017\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3" +
    "\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\034" +
    "\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\043\uffa3" +
    "\044\uffa3\045\uffa3\062\uffa3\063\uffa3\065\uffa3\066\uffa3\067" +
    "\uffa3\071\uffa3\072\uffa3\076\uffa3\105\103\001\002\000\116" +
    "\004\uff94\005\uff94\007\uff94\011\uff94\013\uff94\014\uff94\015" +
    "\uff94\016\uff94\017\uff94\021\uff94\022\uff94\023\uff94\024\uff94" +
    "\025\uff94\026\uff94\027\uff94\030\uff94\031\uff94\032\uff94\033" +
    "\uff94\034\uff94\035\uff94\036\uff94\037\uff94\040\uff94\041\uff94" +
    "\043\uff94\044\uff94\045\uff94\062\uff94\063\uff94\065\uff94\066" +
    "\uff94\067\uff94\071\uff94\072\uff94\076\uff94\105\uff94\001\002" +
    "\000\112\005\uff9a\007\uff9a\011\uff9a\014\uff9a\015\uff9a\016" +
    "\uff9a\017\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a" +
    "\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034" +
    "\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\043\uff9a" +
    "\044\uff9a\045\uff9a\062\uff9a\063\uff9a\065\uff9a\066\uff9a\067" +
    "\uff9a\071\uff9a\072\uff9a\076\uff9a\105\uff9a\001\002\000\040" +
    "\005\137\015\140\017\111\021\112\022\101\023\114\024" +
    "\104\025\110\026\107\027\105\030\102\031\106\032\115" +
    "\033\113\105\103\001\002\000\112\005\uff95\007\uff95\011" +
    "\uff95\014\uff95\015\uff95\016\uff95\017\uff95\021\uff95\022\uff95" +
    "\023\uff95\024\uff95\025\uff95\026\uff95\027\uff95\030\uff95\031" +
    "\uff95\032\uff95\033\uff95\034\uff95\035\uff95\036\uff95\037\uff95" +
    "\040\uff95\041\uff95\043\uff95\044\uff95\045\uff95\062\uff95\063" +
    "\uff95\065\uff95\066\uff95\067\uff95\071\uff95\072\uff95\076\uff95" +
    "\105\uff95\001\002\000\032\004\055\022\013\042\075\073" +
    "\005\075\057\101\061\102\041\103\032\104\033\105\126" +
    "\106\004\107\024\001\002\000\040\005\uff72\015\143\017" +
    "\111\021\112\022\101\023\114\024\104\025\110\026\107" +
    "\027\105\030\102\031\106\032\115\033\113\105\103\001" +
    "\002\000\004\005\146\001\002\000\032\004\055\022\013" +
    "\042\075\073\005\075\057\101\061\102\041\103\032\104" +
    "\033\105\126\106\004\107\024\001\002\000\040\005\uff72" +
    "\015\143\017\111\021\112\022\101\023\114\024\104\025" +
    "\110\026\107\027\105\030\102\031\106\032\115\033\113" +
    "\105\103\001\002\000\004\005\uff71\001\002\000\112\005" +
    "\uff99\007\uff99\011\uff99\014\uff99\015\uff99\016\uff99\017\uff99" +
    "\021\uff99\022\uff99\023\uff99\024\uff99\025\uff99\026\uff99\027" +
    "\uff99\030\uff99\031\uff99\032\uff99\033\uff99\034\uff99\035\uff99" +
    "\036\uff99\037\uff99\040\uff99\041\uff99\043\uff99\044\uff99\045" +
    "\uff99\062\uff99\063\uff99\065\uff99\066\uff99\067\uff99\071\uff99" +
    "\072\uff99\076\uff99\105\uff99\001\002\000\004\005\156\001" +
    "\002\000\032\004\055\022\013\042\075\073\005\075\057" +
    "\101\061\102\041\103\032\104\033\105\120\106\004\107" +
    "\024\001\002\000\014\005\uff82\007\uff82\015\uff82\016\uff82" +
    "\076\uff82\001\002\000\004\016\153\001\002\000\032\004" +
    "\055\022\013\042\075\073\005\075\057\101\061\102\041" +
    "\103\032\104\033\105\126\106\004\107\024\001\002\000" +
    "\036\005\155\017\111\021\112\022\101\023\114\024\104" +
    "\025\110\026\107\027\105\030\102\031\106\032\115\033" +
    "\113\105\103\001\002\000\112\005\uffa0\007\uffa0\011\uffa0" +
    "\014\uffa0\015\uffa0\016\uffa0\017\uffa0\021\uffa0\022\uffa0\023" +
    "\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0" +
    "\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040" +
    "\uffa0\041\uffa0\043\uffa0\044\uffa0\045\uffa0\062\uffa0\063\uffa0" +
    "\065\uffa0\066\uffa0\067\uffa0\071\uffa0\072\uffa0\076\uffa0\105" +
    "\uffa0\001\002\000\112\005\uff9e\007\uff9e\011\uff9e\014\uff9e" +
    "\015\uff9e\016\uff9e\017\uff9e\021\uff9e\022\uff9e\023\uff9e\024" +
    "\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e" +
    "\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041" +
    "\uff9e\043\uff9e\044\uff9e\045\uff9e\062\uff9e\063\uff9e\065\uff9e" +
    "\066\uff9e\067\uff9e\071\uff9e\072\uff9e\076\uff9e\105\uff9e\001" +
    "\002\000\004\105\160\001\002\000\020\005\uff81\007\uff81" +
    "\012\166\015\uff81\016\uff81\017\165\076\uff81\001\002\000" +
    "\004\016\162\001\002\000\032\004\055\022\013\042\075" +
    "\073\005\075\057\101\061\102\041\103\032\104\033\105" +
    "\126\106\004\107\024\001\002\000\036\005\164\017\111" +
    "\021\112\022\101\023\114\024\104\025\110\026\107\027" +
    "\105\030\102\031\106\032\115\033\113\105\103\001\002" +
    "\000\112\005\uffa1\007\uffa1\011\uffa1\014\uffa1\015\uffa1\016" +
    "\uffa1\017\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1" +
    "\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\034" +
    "\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\043\uffa1" +
    "\044\uffa1\045\uffa1\062\uffa1\063\uffa1\065\uffa1\066\uffa1\067" +
    "\uffa1\071\uffa1\072\uffa1\076\uffa1\105\uffa1\001\002\000\032" +
    "\004\055\022\013\042\075\073\005\075\057\101\061\102" +
    "\041\103\032\104\033\105\126\106\004\107\024\001\002" +
    "\000\010\074\171\105\173\107\172\001\002\000\020\005" +
    "\uff7b\007\uff7b\014\uff7b\015\uff7b\016\uff7b\017\uff7b\076\uff7b" +
    "\001\002\000\022\005\uff7c\007\uff7c\013\212\014\uff7c\015" +
    "\uff7c\016\uff7c\017\uff7c\076\uff7c\001\002\000\004\004\203" +
    "\001\002\000\004\004\200\001\002\000\022\005\uff7d\007" +
    "\uff7d\013\132\014\uff7d\015\uff7d\016\uff7d\017\uff7d\076\uff7d" +
    "\001\002\000\020\005\uff7a\007\uff7a\014\uff7a\015\uff7a\016" +
    "\uff7a\017\uff7a\076\uff7a\001\002\000\016\005\uff80\007\uff80" +
    "\015\uff80\016\uff80\017\176\076\uff80\001\002\000\032\004" +
    "\055\022\013\042\075\073\005\075\057\101\061\102\041" +
    "\103\032\104\033\105\126\106\004\107\024\001\002\000" +
    "\046\005\uff7f\007\uff7f\015\uff7f\016\uff7f\017\111\021\112" +
    "\022\101\023\114\024\104\025\110\026\107\027\105\030" +
    "\102\031\106\032\115\033\113\076\uff7f\105\103\001\002" +
    "\000\010\074\171\105\173\107\172\001\002\000\004\005" +
    "\202\001\002\000\020\005\uff79\007\uff79\014\uff79\015\uff79" +
    "\016\uff79\017\uff79\076\uff79\001\002\000\006\005\204\105" +
    "\160\001\002\000\020\005\uff78\007\uff78\014\uff78\015\uff78" +
    "\016\uff78\017\uff78\076\uff78\001\002\000\012\005\uff76\007" +
    "\uff76\015\210\076\uff76\001\002\000\004\005\207\001\002" +
    "\000\020\005\uff77\007\uff77\014\uff77\015\uff77\016\uff77\017" +
    "\uff77\076\uff77\001\002\000\004\105\160\001\002\000\010" +
    "\005\uff75\007\uff75\076\uff75\001\002\000\004\105\213\001" +
    "\002\000\116\004\uff93\005\uff93\007\uff93\011\uff93\013\uff93" +
    "\014\uff93\015\uff93\016\uff93\017\uff93\021\uff93\022\uff93\023" +
    "\uff93\024\uff93\025\uff93\026\uff93\027\uff93\030\uff93\031\uff93" +
    "\032\uff93\033\uff93\034\uff93\035\uff93\036\uff93\037\uff93\040" +
    "\uff93\041\uff93\043\uff93\044\uff93\045\uff93\062\uff93\063\uff93" +
    "\065\uff93\066\uff93\067\uff93\071\uff93\072\uff93\076\uff93\105" +
    "\uff93\001\002\000\046\005\uff7e\007\uff7e\015\uff7e\016\uff7e" +
    "\017\111\021\112\022\101\023\114\024\104\025\110\026" +
    "\107\027\105\030\102\031\106\032\115\033\113\076\uff7e" +
    "\105\103\001\002\000\112\005\uffa7\007\uffa7\011\uffa7\014" +
    "\uffa7\015\uffa7\016\uffa7\017\uffa7\021\uffa7\022\uffa7\023\uffa7" +
    "\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032" +
    "\uffa7\033\113\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7" +
    "\041\uffa7\043\uffa7\044\uffa7\045\uffa7\062\uffa7\063\uffa7\065" +
    "\uffa7\066\uffa7\067\uffa7\071\uffa7\072\uffa7\076\uffa7\105\103" +
    "\001\002\000\114\004\217\005\uff9c\007\uff9c\011\uff9c\014" +
    "\uff9c\015\uff9c\016\uff9c\017\uff9c\021\uff9c\022\uff9c\023\uff9c" +
    "\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032" +
    "\uff9c\033\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c" +
    "\041\uff9c\043\uff9c\044\uff9c\045\uff9c\062\uff9c\063\uff9c\065" +
    "\uff9c\066\uff9c\067\uff9c\071\uff9c\072\uff9c\076\uff9c\105\uff9c" +
    "\001\002\000\034\004\055\005\uff74\022\013\042\075\073" +
    "\005\075\057\101\061\102\041\103\032\104\033\105\126" +
    "\106\004\107\024\001\002\000\040\005\uff72\015\143\017" +
    "\111\021\112\022\101\023\114\024\104\025\110\026\107" +
    "\027\105\030\102\031\106\032\115\033\113\105\103\001" +
    "\002\000\004\005\222\001\002\000\112\005\uff9d\007\uff9d" +
    "\011\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d\021\uff9d\022" +
    "\uff9d\023\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d" +
    "\031\uff9d\032\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037" +
    "\uff9d\040\uff9d\041\uff9d\043\uff9d\044\uff9d\045\uff9d\062\uff9d" +
    "\063\uff9d\065\uff9d\066\uff9d\067\uff9d\071\uff9d\072\uff9d\076" +
    "\uff9d\105\uff9d\001\002\000\004\005\uff73\001\002\000\112" +
    "\005\uffa9\007\uffa9\011\uffa9\014\uffa9\015\uffa9\016\uffa9\017" +
    "\uffa9\021\uffa9\022\uffa9\023\114\024\104\025\uffa9\026\uffa9" +
    "\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033\113\034\uffa9\035" +
    "\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\043\uffa9\044\uffa9" +
    "\045\uffa9\062\uffa9\063\uffa9\065\uffa9\066\uffa9\067\uffa9\071" +
    "\uffa9\072\uffa9\076\uffa9\105\103\001\002\000\076\005\uffaf" +
    "\007\uffaf\011\uffaf\014\uffaf\015\uffaf\016\uffaf\021\112\022" +
    "\101\023\114\024\104\032\uffaf\033\113\034\uffaf\035\uffaf" +
    "\036\uffaf\037\uffaf\040\uffaf\041\uffaf\043\uffaf\044\uffaf\045" +
    "\uffaf\062\uffaf\063\uffaf\065\uffaf\066\uffaf\067\uffaf\071\uffaf" +
    "\072\uffaf\076\uffaf\105\103\001\002\000\076\005\uffae\007" +
    "\uffae\011\uffae\014\uffae\015\uffae\016\uffae\021\112\022\101" +
    "\023\114\024\104\032\uffae\033\113\034\uffae\035\uffae\036" +
    "\uffae\037\uffae\040\uffae\041\uffae\043\uffae\044\uffae\045\uffae" +
    "\062\uffae\063\uffae\065\uffae\066\uffae\067\uffae\071\uffae\072" +
    "\uffae\076\uffae\105\103\001\002\000\076\005\uffad\007\uffad" +
    "\011\uffad\014\uffad\015\uffad\016\uffad\021\112\022\101\023" +
    "\114\024\104\032\uffad\033\113\034\uffad\035\uffad\036\uffad" +
    "\037\uffad\040\uffad\041\uffad\043\uffad\044\uffad\045\uffad\062" +
    "\uffad\063\uffad\065\uffad\066\uffad\067\uffad\071\uffad\072\uffad" +
    "\076\uffad\105\103\001\002\000\076\005\uffaa\007\uffaa\011" +
    "\uffaa\014\uffaa\015\uffaa\016\uffaa\021\112\022\101\023\114" +
    "\024\104\032\uffaa\033\113\034\uffaa\035\uffaa\036\uffaa\037" +
    "\uffaa\040\uffaa\041\uffaa\043\uffaa\044\uffaa\045\uffaa\062\uffaa" +
    "\063\uffaa\065\uffaa\066\uffaa\067\uffaa\071\uffaa\072\uffaa\076" +
    "\uffaa\105\103\001\002\000\076\005\uffac\007\uffac\011\uffac" +
    "\014\uffac\015\uffac\016\uffac\021\112\022\101\023\114\024" +
    "\104\032\uffac\033\113\034\uffac\035\uffac\036\uffac\037\uffac" +
    "\040\uffac\041\uffac\043\uffac\044\uffac\045\uffac\062\uffac\063" +
    "\uffac\065\uffac\066\uffac\067\uffac\071\uffac\072\uffac\076\uffac" +
    "\105\103\001\002\000\112\005\uffa6\007\uffa6\011\uffa6\014" +
    "\uffa6\015\uffa6\016\uffa6\017\uffa6\021\uffa6\022\uffa6\023\uffa6" +
    "\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6\032" +
    "\uffa6\033\113\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6" +
    "\041\uffa6\043\uffa6\044\uffa6\045\uffa6\062\uffa6\063\uffa6\065" +
    "\uffa6\066\uffa6\067\uffa6\071\uffa6\072\uffa6\076\uffa6\105\103" +
    "\001\002\000\112\005\uffa5\007\uffa5\011\uffa5\014\uffa5\015" +
    "\uffa5\016\uffa5\017\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5" +
    "\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033" +
    "\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5" +
    "\043\uffa5\044\uffa5\045\uffa5\062\uffa5\063\uffa5\065\uffa5\066" +
    "\uffa5\067\uffa5\071\uffa5\072\uffa5\076\uffa5\105\103\001\002" +
    "\000\076\005\uffab\007\uffab\011\uffab\014\uffab\015\uffab\016" +
    "\uffab\021\112\022\101\023\114\024\104\032\uffab\033\113" +
    "\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041\uffab\043" +
    "\uffab\044\uffab\045\uffab\062\uffab\063\uffab\065\uffab\066\uffab" +
    "\067\uffab\071\uffab\072\uffab\076\uffab\105\103\001\002\000" +
    "\112\005\uffa8\007\uffa8\011\uffa8\014\uffa8\015\uffa8\016\uffa8" +
    "\017\uffa8\021\uffa8\022\uffa8\023\114\024\104\025\uffa8\026" +
    "\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\113\034\uffa8" +
    "\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\043\uffa8\044" +
    "\uffa8\045\uffa8\062\uffa8\063\uffa8\065\uffa8\066\uffa8\067\uffa8" +
    "\071\uffa8\072\uffa8\076\uffa8\105\103\001\002\000\036\017" +
    "\111\021\112\022\101\023\114\024\104\025\110\026\107" +
    "\027\105\030\102\031\106\032\115\033\113\043\237\105" +
    "\103\001\002\000\032\004\055\022\013\042\075\073\005" +
    "\075\057\101\061\102\041\103\032\104\033\105\126\106" +
    "\004\107\024\001\002\000\036\017\111\021\112\022\101" +
    "\023\114\024\104\025\110\026\107\027\105\030\102\031" +
    "\106\032\115\033\113\044\241\105\103\001\002\000\032" +
    "\004\055\022\013\042\075\073\005\075\057\101\061\102" +
    "\041\103\032\104\033\105\126\106\004\107\024\001\002" +
    "\000\036\017\111\021\112\022\101\023\114\024\104\025" +
    "\110\026\107\027\105\030\102\031\106\032\115\033\113" +
    "\045\243\105\103\001\002\000\112\005\uffb0\007\uffb0\011" +
    "\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\021\uffb0\022\uffb0" +
    "\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031" +
    "\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0" +
    "\040\uffb0\041\uffb0\043\uffb0\044\uffb0\045\uffb0\062\uffb0\063" +
    "\uffb0\065\uffb0\066\uffb0\067\uffb0\071\uffb0\072\uffb0\076\uffb0" +
    "\105\uffb0\001\002\000\036\005\uffca\006\245\007\uffca\014" +
    "\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\062\uffca" +
    "\063\uffca\065\uffca\071\uffca\072\uffca\001\002\000\006\063" +
    "\246\105\247\001\002\000\004\105\261\001\002\000\006" +
    "\035\256\062\255\001\002\000\004\007\254\001\002\000" +
    "\006\007\uffc8\014\252\001\002\000\006\063\246\105\247" +
    "\001\002\000\004\007\uffc7\001\002\000\034\005\uffc9\007" +
    "\uffc9\014\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9" +
    "\062\uffc9\063\uffc9\065\uffc9\071\uffc9\072\uffc9\001\002\000" +
    "\032\004\055\022\013\042\075\073\005\075\057\101\061" +
    "\102\041\103\032\104\033\105\074\106\004\107\024\001" +
    "\002\000\032\004\055\022\013\042\075\073\005\075\057" +
    "\101\061\102\041\103\032\104\033\105\074\106\004\107" +
    "\024\001\002\000\006\007\uffc6\014\uffc6\001\002\000\006" +
    "\007\uffc4\014\uffc4\001\002\000\004\064\262\001\002\000" +
    "\032\004\055\022\013\042\075\073\005\075\057\101\061" +
    "\102\041\103\032\104\033\105\074\106\004\107\024\001" +
    "\002\000\006\007\uffc5\014\uffc5\001\002\000\034\004\055" +
    "\005\uff74\022\013\042\075\073\005\075\057\101\061\102" +
    "\041\103\032\104\033\105\126\106\004\107\024\001\002" +
    "\000\004\005\266\001\002\000\112\005\uff98\007\uff98\011" +
    "\uff98\014\uff98\015\uff98\016\uff98\017\uff98\021\uff98\022\uff98" +
    "\023\uff98\024\uff98\025\uff98\026\uff98\027\uff98\030\uff98\031" +
    "\uff98\032\uff98\033\uff98\034\uff98\035\uff98\036\uff98\037\uff98" +
    "\040\uff98\041\uff98\043\uff98\044\uff98\045\uff98\062\uff98\063" +
    "\uff98\065\uff98\066\uff98\067\uff98\071\uff98\072\uff98\076\uff98" +
    "\105\uff98\001\002\000\070\002\uffe7\004\uffe7\006\uffe7\007" +
    "\uffe7\022\uffe7\042\uffe7\044\uffe7\046\uffe7\047\uffe7\050\uffe7" +
    "\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057" +
    "\uffe7\060\uffe7\073\uffe7\075\uffe7\101\uffe7\102\uffe7\103\uffe7" +
    "\104\uffe7\105\uffe7\106\uffe7\107\uffe7\001\002\000\070\002" +
    "\ufff0\004\ufff0\006\ufff0\007\ufff0\022\ufff0\042\ufff0\044\ufff0" +
    "\046\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\054" +
    "\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0\073\ufff0\075\ufff0" +
    "\101\ufff0\102\ufff0\103\ufff0\104\ufff0\105\ufff0\106\ufff0\107" +
    "\ufff0\001\002\000\010\074\171\105\173\107\272\001\002" +
    "\000\006\004\200\010\300\001\002\000\010\005\uffb9\014" +
    "\uffb9\017\276\001\002\000\010\005\uffb7\014\uffb7\017\uffb7" +
    "\001\002\000\010\005\uffb6\014\uffb6\017\uffb6\001\002\000" +
    "\032\004\055\022\013\042\075\073\005\075\057\101\061" +
    "\102\041\103\032\104\033\105\074\106\004\107\024\001" +
    "\002\000\006\005\uffb8\014\uffb8\001\002\000\034\004\055" +
    "\022\013\023\301\042\075\073\005\075\057\101\061\102" +
    "\041\103\032\104\033\105\126\106\004\107\024\001\002" +
    "\000\004\011\uffb2\001\002\000\004\011\307\001\002\000" +
    "\036\017\111\021\112\022\101\023\114\024\104\025\110" +
    "\026\107\027\105\030\102\031\106\032\115\033\113\034" +
    "\304\105\103\001\002\000\034\004\055\022\013\023\305" +
    "\042\075\073\005\075\057\101\061\102\041\103\032\104" +
    "\033\105\126\106\004\107\024\001\002\000\004\011\uffb3" +
    "\001\002\000\036\011\uffb4\017\111\021\112\022\101\023" +
    "\114\024\104\025\110\026\107\027\105\030\102\031\106" +
    "\032\115\033\113\105\103\001\002\000\004\004\310\001" +
    "\002\000\010\074\171\105\173\107\172\001\002\000\004" +
    "\005\312\001\002\000\010\005\uffb5\014\uffb5\017\uffb5\001" +
    "\002\000\070\002\uffef\004\uffef\006\uffef\007\uffef\022\uffef" +
    "\042\uffef\044\uffef\046\uffef\047\uffef\050\uffef\051\uffef\052" +
    "\uffef\053\uffef\054\uffef\055\uffef\056\uffef\057\uffef\060\uffef" +
    "\073\uffef\075\uffef\101\uffef\102\uffef\103\uffef\104\uffef\105" +
    "\uffef\106\uffef\107\uffef\001\002\000\004\076\315\001\002" +
    "\000\032\004\055\022\013\042\075\073\005\075\057\101" +
    "\061\102\041\103\032\104\033\105\126\106\004\107\024" +
    "\001\002\000\112\005\uffb1\007\uffb1\011\uffb1\014\uffb1\015" +
    "\uffb1\016\uffb1\017\111\021\112\022\101\023\114\024\104" +
    "\025\110\026\107\027\105\030\102\031\106\032\uffb1\033" +
    "\113\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1" +
    "\043\uffb1\044\uffb1\045\uffb1\062\uffb1\063\uffb1\065\uffb1\066" +
    "\uffb1\067\uffb1\071\uffb1\072\uffb1\076\uffb1\105\103\001\002" +
    "\000\056\004\055\006\056\007\uffe5\022\013\042\025\046" +
    "\047\051\012\052\054\053\070\054\043\056\023\057\034" +
    "\060\022\073\005\075\057\101\061\102\041\103\032\104" +
    "\033\105\063\106\004\107\024\001\002\000\004\007\321" +
    "\001\002\000\070\002\uffe6\004\uffe6\006\uffe6\007\uffe6\022" +
    "\uffe6\042\uffe6\044\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6" +
    "\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060" +
    "\uffe6\073\uffe6\075\uffe6\101\uffe6\102\uffe6\103\uffe6\104\uffe6" +
    "\105\uffe6\106\uffe6\107\uffe6\001\002\000\004\007\uffe4\001" +
    "\002\000\036\005\137\017\111\021\112\022\101\023\114" +
    "\024\104\025\110\026\107\027\105\030\102\031\106\032" +
    "\115\033\113\105\103\001\002\000\032\004\055\022\013" +
    "\042\075\073\005\075\057\101\061\102\041\103\032\104" +
    "\033\105\074\106\004\107\024\001\002\000\004\005\326" +
    "\001\002\000\054\004\055\006\056\022\013\042\025\046" +
    "\047\051\012\052\054\053\070\054\043\056\023\057\034" +
    "\060\022\073\005\075\057\101\061\102\041\103\032\104" +
    "\033\105\063\106\004\107\024\001\002\000\070\002\uffd3" +
    "\004\uffd3\006\uffd3\007\uffd3\022\uffd3\042\uffd3\044\uffd3\046" +
    "\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3" +
    "\055\uffd3\056\uffd3\057\uffd3\060\uffd3\073\uffd3\075\uffd3\101" +
    "\uffd3\102\uffd3\103\uffd3\104\uffd3\105\uffd3\106\uffd3\107\uffd3" +
    "\001\002\000\004\002\001\001\002\000\032\004\055\022" +
    "\013\042\075\073\005\075\057\101\061\102\041\103\032" +
    "\104\033\105\126\106\004\107\024\001\002\000\032\004" +
    "\055\022\013\042\075\073\005\075\057\101\061\102\041" +
    "\103\032\104\033\105\074\106\004\107\024\001\002\000" +
    "\004\105\365\001\002\000\032\004\055\022\013\042\075" +
    "\073\005\075\057\101\061\102\041\103\032\104\033\105" +
    "\074\106\004\107\024\001\002\000\070\002\ufffa\004\ufffa" +
    "\006\ufffa\007\ufffa\022\ufffa\042\ufffa\044\ufffa\046\ufffa\047" +
    "\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa\054\ufffa\055\ufffa" +
    "\056\ufffa\057\ufffa\060\ufffa\073\ufffa\075\ufffa\101\ufffa\102" +
    "\ufffa\103\ufffa\104\ufffa\105\ufffa\106\ufffa\107\ufffa\001\002" +
    "\000\054\004\055\006\357\022\013\042\025\046\047\051" +
    "\012\052\054\053\070\054\043\056\023\057\034\060\022" +
    "\073\005\075\057\101\061\102\041\103\032\104\033\105" +
    "\063\106\004\107\024\001\002\000\054\004\055\006\351" +
    "\022\013\042\025\046\047\051\012\052\054\053\070\054" +
    "\043\056\023\057\034\060\022\073\005\075\057\101\061" +
    "\102\041\103\032\104\033\105\063\106\004\107\024\001" +
    "\002\000\032\004\055\022\013\042\075\073\005\075\057" +
    "\101\061\102\041\103\032\104\033\105\074\106\004\107" +
    "\024\001\002\000\032\004\055\022\013\042\075\073\005" +
    "\075\057\101\061\102\041\103\032\104\033\105\126\106" +
    "\004\107\024\001\002\000\032\004\055\022\013\042\075" +
    "\073\005\075\057\101\061\102\041\103\032\104\033\105" +
    "\126\106\004\107\024\001\002\000\032\004\055\022\013" +
    "\042\075\073\005\075\057\101\061\102\041\103\032\104" +
    "\033\105\126\106\004\107\024\001\002\000\036\014\uffe1" +
    "\017\111\021\112\022\101\023\114\024\104\025\110\026" +
    "\107\027\105\030\102\031\106\032\115\033\113\105\103" +
    "\001\002\000\036\014\uffe2\017\111\021\112\022\101\023" +
    "\114\024\104\025\110\026\107\027\105\030\102\031\106" +
    "\032\115\033\113\105\103\001\002\000\036\014\uffdf\017" +
    "\111\021\112\022\101\023\114\024\104\025\110\026\107" +
    "\027\105\030\102\031\106\032\115\033\113\105\103\001" +
    "\002\000\004\014\uffc3\001\002\000\070\002\uffd7\004\uffd7" +
    "\006\uffd7\007\uffd7\022\uffd7\042\uffd7\044\uffd7\046\uffd7\047" +
    "\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7" +
    "\056\uffd7\057\uffd7\060\uffd7\073\uffd7\075\uffd7\101\uffd7\102" +
    "\uffd7\103\uffd7\104\uffd7\105\uffd7\106\uffd7\107\uffd7\001\002" +
    "\000\054\004\055\006\056\022\013\042\025\046\047\051" +
    "\012\052\054\053\070\054\043\056\023\057\034\060\022" +
    "\073\005\075\057\101\061\102\041\103\032\104\033\105" +
    "\352\106\004\107\024\001\002\000\122\004\131\012\271" +
    "\013\132\014\uff9b\016\353\017\uff9b\021\uff9b\022\uff9b\023" +
    "\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b" +
    "\032\uff9b\033\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b\041" +
    "\uff9b\042\075\061\244\062\uff9b\063\uff9b\065\uff9b\066\uff9b" +
    "\067\uff9b\071\uff9b\072\uff9b\073\005\075\057\101\061\102" +
    "\041\103\032\104\033\105\126\106\004\107\024\001\002" +
    "\000\054\004\055\006\056\022\013\042\025\046\047\051" +
    "\012\052\054\053\070\054\043\056\023\057\034\060\022" +
    "\073\005\075\057\101\061\102\041\103\032\104\033\105" +
    "\063\106\004\107\024\001\002\000\004\007\355\001\002" +
    "\000\070\002\uffd6\004\uffd6\006\uffd6\007\uffd6\022\uffd6\042" +
    "\uffd6\044\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6" +
    "\053\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\073" +
    "\uffd6\075\uffd6\101\uffd6\102\uffd6\103\uffd6\104\uffd6\105\uffd6" +
    "\106\uffd6\107\uffd6\001\002\000\070\002\uffd5\004\uffd5\006" +
    "\uffd5\007\uffd5\022\uffd5\042\uffd5\044\uffd5\046\uffd5\047\uffd5" +
    "\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056" +
    "\uffd5\057\uffd5\060\uffd5\073\uffd5\075\uffd5\101\uffd5\102\uffd5" +
    "\103\uffd5\104\uffd5\105\uffd5\106\uffd5\107\uffd5\001\002\000" +
    "\054\004\055\006\056\022\013\042\025\046\047\051\012" +
    "\052\054\053\070\054\043\056\023\057\034\060\022\073" +
    "\005\075\057\101\061\102\041\103\032\104\033\105\360" +
    "\106\004\107\024\001\002\000\122\004\131\012\271\013" +
    "\132\014\uff9b\016\361\017\uff9b\021\uff9b\022\uff9b\023\uff9b" +
    "\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032" +
    "\uff9b\033\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b" +
    "\042\075\061\244\062\uff9b\063\uff9b\065\uff9b\066\uff9b\067" +
    "\uff9b\071\uff9b\072\uff9b\073\005\075\057\101\061\102\041" +
    "\103\032\104\033\105\126\106\004\107\024\001\002\000" +
    "\054\004\055\006\056\022\013\042\025\046\047\051\012" +
    "\052\054\053\070\054\043\056\023\057\034\060\022\073" +
    "\005\075\057\101\061\102\041\103\032\104\033\105\063" +
    "\106\004\107\024\001\002\000\004\007\363\001\002\000" +
    "\070\002\uffd4\004\uffd4\006\uffd4\007\uffd4\022\uffd4\042\uffd4" +
    "\044\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053" +
    "\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4\073\uffd4" +
    "\075\uffd4\101\uffd4\102\uffd4\103\uffd4\104\uffd4\105\uffd4\106" +
    "\uffd4\107\uffd4\001\002\000\004\014\uffe3\001\002\000\004" +
    "\064\366\001\002\000\032\004\055\022\013\042\075\073" +
    "\005\075\057\101\061\102\041\103\032\104\033\105\074" +
    "\106\004\107\024\001\002\000\004\014\uffc0\001\002\000" +
    "\004\014\uffc2\001\002\000\036\014\uffe0\017\111\021\112" +
    "\022\101\023\114\024\104\025\110\026\107\027\105\030" +
    "\102\031\106\032\115\033\113\105\103\001\002\000\032" +
    "\004\055\022\013\042\075\073\005\075\057\101\061\102" +
    "\041\103\032\104\033\105\074\106\004\107\024\001\002" +
    "\000\004\005\374\001\002\000\004\006\375\001\002\000" +
    "\004\047\376\001\002\000\014\101\061\102\041\103\032" +
    "\104\033\106\004\001\002\000\006\007\u0101\050\u0100\001" +
    "\002\000\004\012\u0102\001\002\000\070\002\uffdc\004\uffdc" +
    "\006\uffdc\007\uffdc\022\uffdc\042\uffdc\044\uffdc\046\uffdc\047" +
    "\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc" +
    "\056\uffdc\057\uffdc\060\uffdc\073\uffdc\075\uffdc\101\uffdc\102" +
    "\uffdc\103\uffdc\104\uffdc\105\uffdc\106\uffdc\107\uffdc\001\002" +
    "\000\054\004\055\006\056\022\013\042\025\046\047\051" +
    "\012\052\054\053\070\054\043\056\023\057\034\060\022" +
    "\073\005\075\057\101\061\102\041\103\032\104\033\105" +
    "\063\106\004\107\024\001\002\000\004\007\u0104\001\002" +
    "\000\070\002\uffdb\004\uffdb\006\uffdb\007\uffdb\022\uffdb\042" +
    "\uffdb\044\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb" +
    "\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\073" +
    "\uffdb\075\uffdb\101\uffdb\102\uffdb\103\uffdb\104\uffdb\105\uffdb" +
    "\106\uffdb\107\uffdb\001\002\000\004\012\u0106\001\002\000" +
    "\054\004\055\006\056\022\013\042\025\046\047\051\012" +
    "\052\054\053\070\054\043\056\023\057\034\060\022\073" +
    "\005\075\057\101\061\102\041\103\032\104\033\105\063" +
    "\106\004\107\024\001\002\000\010\007\uffda\047\376\050" +
    "\uffda\001\002\000\006\007\uffd9\050\uffd9\001\002\000\004" +
    "\055\u010b\001\002\000\070\002\uffd1\004\uffd1\006\uffd1\007" +
    "\uffd1\022\uffd1\042\uffd1\044\uffd1\046\uffd1\047\uffd1\050\uffd1" +
    "\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057" +
    "\uffd1\060\uffd1\073\uffd1\075\uffd1\101\uffd1\102\uffd1\103\uffd1" +
    "\104\uffd1\105\uffd1\106\uffd1\107\uffd1\001\002\000\004\004" +
    "\u010c\001\002\000\004\105\u010d\001\002\000\004\012\271" +
    "\001\002\000\004\005\u010f\001\002\000\054\004\055\006" +
    "\056\022\013\042\025\046\047\051\012\052\054\053\070" +
    "\054\043\056\023\057\034\060\022\073\005\075\057\101" +
    "\061\102\041\103\032\104\033\105\063\106\004\107\024" +
    "\001\002\000\070\002\uffd0\004\uffd0\006\uffd0\007\uffd0\022" +
    "\uffd0\042\uffd0\044\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0" +
    "\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060" +
    "\uffd0\073\uffd0\075\uffd0\101\uffd0\102\uffd0\103\uffd0\104\uffd0" +
    "\105\uffd0\106\uffd0\107\uffd0\001\002\000\070\002\uffcf\004" +
    "\uffcf\006\uffcf\007\uffcf\022\uffcf\042\uffcf\044\uffcf\046\uffcf" +
    "\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055" +
    "\uffcf\056\uffcf\057\uffcf\060\uffcf\073\uffcf\075\uffcf\101\uffcf" +
    "\102\uffcf\103\uffcf\104\uffcf\105\uffcf\106\uffcf\107\uffcf\001" +
    "\002\000\004\014\uffc1\001\002\000\004\105\u0114\001\002" +
    "\000\010\014\uffbd\015\u0118\070\uffbd\001\002\000\006\014" +
    "\uffbf\070\u0116\001\002\000\032\004\055\022\013\042\075" +
    "\073\005\075\057\101\061\102\041\103\032\104\033\105" +
    "\126\106\004\107\024\001\002\000\036\014\uffbe\017\111" +
    "\021\112\022\101\023\114\024\104\025\110\026\107\027" +
    "\105\030\102\031\106\032\115\033\113\105\103\001\002" +
    "\000\004\105\u0114\001\002\000\006\014\uffbc\070\uffbc\001" +
    "\002\000\070\002\ufff1\004\ufff1\006\ufff1\007\ufff1\022\ufff1" +
    "\042\ufff1\044\ufff1\046\ufff1\047\ufff1\050\ufff1\051\ufff1\052" +
    "\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1" +
    "\073\ufff1\075\ufff1\101\ufff1\102\ufff1\103\ufff1\104\ufff1\105" +
    "\ufff1\106\ufff1\107\ufff1\001\002\000\070\002\uffee\004\uffee" +
    "\006\uffee\007\uffee\022\uffee\042\uffee\044\uffee\046\uffee\047" +
    "\uffee\050\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055\uffee" +
    "\056\uffee\057\uffee\060\uffee\073\uffee\075\uffee\101\uffee\102" +
    "\uffee\103\uffee\104\uffee\105\uffee\106\uffee\107\uffee\001\002" +
    "\000\004\014\uffcc\001\002\000\006\013\212\033\u0124\001" +
    "\002\000\004\100\u0122\001\002\000\006\013\132\033\u0120" +
    "\001\002\000\004\105\u0121\001\002\000\004\100\ufffc\001" +
    "\002\000\054\004\055\006\056\022\013\042\025\046\047" +
    "\051\012\052\054\053\070\054\043\056\023\057\034\060" +
    "\022\073\005\075\057\101\061\102\041\103\032\104\033" +
    "\105\063\106\004\107\024\001\002\000\004\002\ufffe\001" +
    "\002\000\004\105\u0125\001\002\000\004\100\ufffd\001\002" +
    "\000\070\002\uffed\004\uffed\006\uffed\007\uffed\022\uffed\042" +
    "\uffed\044\uffed\046\uffed\047\uffed\050\uffed\051\uffed\052\uffed" +
    "\053\uffed\054\uffed\055\uffed\056\uffed\057\uffed\060\uffed\073" +
    "\uffed\075\uffed\101\uffed\102\uffed\103\uffed\104\uffed\105\uffed" +
    "\106\uffed\107\uffed\001\002\000\070\002\uffec\004\uffec\006" +
    "\uffec\007\uffec\022\uffec\042\uffec\044\uffec\046\uffec\047\uffec" +
    "\050\uffec\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056" +
    "\uffec\057\uffec\060\uffec\073\uffec\075\uffec\101\uffec\102\uffec" +
    "\103\uffec\104\uffec\105\uffec\106\uffec\107\uffec\001\002\000" +
    "\032\004\055\022\013\042\075\073\005\075\057\101\061" +
    "\102\041\103\032\104\033\105\126\106\004\107\024\001" +
    "\002\000\036\005\u012a\017\111\021\112\022\101\023\114" +
    "\024\104\025\110\026\107\027\105\030\102\031\106\032" +
    "\115\033\113\105\103\001\002\000\104\004\055\006\056" +
    "\017\uff95\021\uff95\022\uff95\023\uff95\024\uff95\025\uff95\026" +
    "\uff95\027\uff95\030\uff95\031\uff95\032\uff95\033\uff95\042\025" +
    "\043\uff95\046\047\051\012\052\054\053\070\054\043\056" +
    "\023\057\034\060\022\073\005\075\057\101\061\102\041" +
    "\103\032\104\033\105\063\106\004\107\024\001\002\000" +
    "\070\002\uffde\004\uffde\006\uffde\007\uffde\022\uffde\042\uffde" +
    "\044\u012c\046\uffde\047\uffde\050\uffde\051\uffde\052\uffde\053" +
    "\uffde\054\uffde\055\uffde\056\uffde\057\uffde\060\uffde\073\uffde" +
    "\075\uffde\101\uffde\102\uffde\103\uffde\104\uffde\105\uffde\106" +
    "\uffde\107\uffde\001\002\000\054\004\055\006\056\022\013" +
    "\042\025\046\047\051\012\052\054\053\070\054\043\056" +
    "\023\057\034\060\022\073\005\075\057\101\061\102\041" +
    "\103\032\104\033\105\063\106\004\107\024\001\002\000" +
    "\070\002\uffdd\004\uffdd\006\uffdd\007\uffdd\022\uffdd\042\uffdd" +
    "\044\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053" +
    "\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\073\uffdd" +
    "\075\uffdd\101\uffdd\102\uffdd\103\uffdd\104\uffdd\105\uffdd\106" +
    "\uffdd\107\uffdd\001\002\000\034\004\055\007\u0133\022\013" +
    "\042\075\073\005\075\057\101\061\102\041\103\032\104" +
    "\033\105\126\106\004\107\024\001\002\000\004\007\u0138" +
    "\001\002\000\006\007\uff8d\015\u0136\001\002\000\042\007" +
    "\uff8a\015\uff8a\017\111\021\112\022\101\023\114\024\104" +
    "\025\110\026\107\027\105\030\102\031\106\032\115\033" +
    "\113\034\u0134\105\103\001\002\000\006\007\uff8b\015\uff8b" +
    "\001\002\000\112\005\uff8f\007\uff8f\011\uff8f\014\uff8f\015" +
    "\uff8f\016\uff8f\017\uff8f\021\uff8f\022\uff8f\023\uff8f\024\uff8f" +
    "\025\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f\033" +
    "\uff8f\034\uff8f\035\uff8f\036\uff8f\037\uff8f\040\uff8f\041\uff8f" +
    "\043\uff8f\044\uff8f\045\uff8f\062\uff8f\063\uff8f\065\uff8f\066" +
    "\uff8f\067\uff8f\071\uff8f\072\uff8f\076\uff8f\105\uff8f\001\002" +
    "\000\032\004\055\022\013\042\075\073\005\075\057\101" +
    "\061\102\041\103\032\104\033\105\126\106\004\107\024" +
    "\001\002\000\040\007\uff89\015\uff89\017\111\021\112\022" +
    "\101\023\114\024\104\025\110\026\107\027\105\030\102" +
    "\031\106\032\115\033\113\105\103\001\002\000\032\004" +
    "\055\022\013\042\075\073\005\075\057\101\061\102\041" +
    "\103\032\104\033\105\126\106\004\107\024\001\002\000" +
    "\004\007\uff8c\001\002\000\112\005\uff8e\007\uff8e\011\uff8e" +
    "\014\uff8e\015\uff8e\016\uff8e\017\uff8e\021\uff8e\022\uff8e\023" +
    "\uff8e\024\uff8e\025\uff8e\026\uff8e\027\uff8e\030\uff8e\031\uff8e" +
    "\032\uff8e\033\uff8e\034\uff8e\035\uff8e\036\uff8e\037\uff8e\040" +
    "\uff8e\041\uff8e\043\uff8e\044\uff8e\045\uff8e\062\uff8e\063\uff8e" +
    "\065\uff8e\066\uff8e\067\uff8e\071\uff8e\072\uff8e\076\uff8e\105" +
    "\uff8e\001\002\000\004\014\uffce\001\002\000\070\002\ufff8" +
    "\004\ufff8\006\ufff8\007\ufff8\022\ufff8\042\ufff8\044\ufff8\046" +
    "\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8" +
    "\055\ufff8\056\ufff8\057\ufff8\060\ufff8\073\ufff8\075\ufff8\101" +
    "\ufff8\102\ufff8\103\ufff8\104\ufff8\105\ufff8\106\ufff8\107\ufff8" +
    "\001\002\000\070\002\uffeb\004\uffeb\006\uffeb\007\uffeb\022" +
    "\uffeb\042\uffeb\044\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb" +
    "\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb\060" +
    "\uffeb\073\uffeb\075\uffeb\101\uffeb\102\uffeb\103\uffeb\104\uffeb" +
    "\105\uffeb\106\uffeb\107\uffeb\001\002\000\070\002\uffea\004" +
    "\uffea\006\uffea\007\uffea\022\uffea\042\uffea\044\uffea\046\uffea" +
    "\047\uffea\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea\055" +
    "\uffea\056\uffea\057\uffea\060\uffea\073\uffea\075\uffea\101\uffea" +
    "\102\uffea\103\uffea\104\uffea\105\uffea\106\uffea\107\uffea\001" +
    "\002\000\112\005\uffa4\007\uffa4\011\uffa4\014\uffa4\015\uffa4" +
    "\016\uffa4\017\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\025" +
    "\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4" +
    "\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\043" +
    "\uffa4\044\uffa4\045\uffa4\062\uffa4\063\uffa4\065\uffa4\066\uffa4" +
    "\067\uffa4\071\uffa4\072\uffa4\076\uffa4\105\uffa4\001\002\000" +
    "\004\105\u010d\001\002\000\004\005\u0140\001\002\000\004" +
    "\052\u0141\001\002\000\004\004\u0142\001\002\000\032\004" +
    "\055\022\013\042\075\073\005\075\057\101\061\102\041" +
    "\103\032\104\033\105\074\106\004\107\024\001\002\000" +
    "\004\005\u0144\001\002\000\054\004\055\006\056\022\013" +
    "\042\025\046\047\051\012\052\054\053\070\054\043\056" +
    "\023\057\034\060\022\073\005\075\057\101\061\102\041" +
    "\103\032\104\033\105\063\106\004\107\024\001\002\000" +
    "\070\002\uffd8\004\uffd8\006\uffd8\007\uffd8\022\uffd8\042\uffd8" +
    "\044\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053" +
    "\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8\073\uffd8" +
    "\075\uffd8\101\uffd8\102\uffd8\103\uffd8\104\uffd8\105\uffd8\106" +
    "\uffd8\107\uffd8\001\002\000\004\105\160\001\002\000\004" +
    "\007\u0148\001\002\000\112\005\uff83\007\uff83\011\uff83\014" +
    "\uff83\015\uff83\016\uff83\017\uff83\021\uff83\022\uff83\023\uff83" +
    "\024\uff83\025\uff83\026\uff83\027\uff83\030\uff83\031\uff83\032" +
    "\uff83\033\uff83\034\uff83\035\uff83\036\uff83\037\uff83\040\uff83" +
    "\041\uff83\043\uff83\044\uff83\045\uff83\062\uff83\063\uff83\065" +
    "\uff83\066\uff83\067\uff83\071\uff83\072\uff83\076\uff83\105\uff83" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0146\000\100\002\052\003\044\005\020\006\006\007" +
    "\007\011\017\012\043\013\047\014\066\015\037\017\063" +
    "\020\057\021\050\024\036\025\027\026\025\027\016\030" +
    "\014\032\061\033\005\034\051\035\026\036\064\040\015" +
    "\041\045\042\041\043\065\044\034\045\013\051\035\052" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\042\u013c\043\065\044\034" +
    "\045\013\051\035\052\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\021" +
    "\050\034\u0138\042\075\043\065\044\034\045\013\051\035" +
    "\052\010\001\001\000\002\001\001\000\016\042\235\043" +
    "\065\044\034\045\013\051\035\052\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\u011d\043\u011c\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\021\050\034\u011b\042\075\043\065\044\034\045" +
    "\013\051\035\052\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\074\005\020\006\006\007\007" +
    "\011\017\012\043\013\047\014\066\015\037\017\063\020" +
    "\057\021\050\024\036\025\027\026\025\027\016\030\014" +
    "\032\061\033\005\034\051\035\026\036\064\040\u0108\041" +
    "\045\042\041\043\065\044\034\045\013\051\035\052\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\042\322\043\065\044\034\045\013\051\035\052\010" +
    "\001\001\000\076\005\020\006\006\007\007\011\017\012" +
    "\043\013\047\014\066\015\037\017\063\020\057\021\050" +
    "\024\036\025\027\026\025\027\016\030\014\032\061\033" +
    "\005\034\051\035\026\036\064\037\317\040\316\041\045" +
    "\042\041\043\065\044\034\045\013\051\035\052\010\001" +
    "\001\000\010\053\204\054\150\063\313\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\042" +
    "\132\043\065\044\034\045\013\051\035\052\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\074\005\020\006\006\007\007\011\017" +
    "\012\043\013\047\014\066\015\037\017\063\020\057\021" +
    "\050\024\036\025\027\026\025\027\016\030\014\032\061" +
    "\033\005\034\051\035\026\036\064\040\070\041\045\042" +
    "\041\043\065\044\034\045\013\051\035\052\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\021\050\034" +
    "\076\042\075\043\065\044\034\045\013\051\035\052\010" +
    "\001\001\000\016\042\132\043\065\044\034\045\013\051" +
    "\035\052\010\001\001\000\016\042\235\043\065\044\034" +
    "\045\013\051\035\052\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\042\234\043\065" +
    "\044\034\045\013\051\035\052\010\001\001\000\016\042" +
    "\233\043\065\044\034\045\013\051\035\052\010\001\001" +
    "\000\016\042\232\043\065\044\034\045\013\051\035\052" +
    "\010\001\001\000\016\042\231\043\065\044\034\045\013" +
    "\051\035\052\010\001\001\000\016\042\230\043\065\044" +
    "\034\045\013\051\035\052\010\001\001\000\016\042\227" +
    "\043\065\044\034\045\013\051\035\052\010\001\001\000" +
    "\016\042\226\043\065\044\034\045\013\051\035\052\010" +
    "\001\001\000\016\042\225\043\065\044\034\045\013\051" +
    "\035\052\010\001\001\000\016\042\224\043\065\044\034" +
    "\045\013\051\035\052\010\001\001\000\016\042\223\043" +
    "\065\044\034\045\013\051\035\052\010\001\001\000\002" +
    "\001\001\000\016\042\214\043\065\044\034\045\013\051" +
    "\035\052\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\042\122\043\065\044\034\045\013\051\035\052" +
    "\010\053\123\054\120\001\001\000\016\042\132\043\065" +
    "\044\034\045\013\051\035\052\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\065\146\001\001\000\002" +
    "\001\001\000\016\042\126\043\065\044\034\045\013\051" +
    "\035\052\010\001\001\000\016\042\132\043\065\044\034" +
    "\045\013\051\035\052\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\042\135\043\065\044\034\045\013" +
    "\051\035\052\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\042\140\043\065\044\034\045" +
    "\013\051\035\052\010\001\001\000\004\065\141\001\001" +
    "\000\002\001\001\000\016\042\143\043\065\044\034\045" +
    "\013\051\035\052\010\001\001\000\004\065\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\042\143\043\065\044\034\045\013\051\035\052\010" +
    "\053\151\054\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\042\153\043\065\044\034\045\013\051\035" +
    "\052\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\053\160\054\150\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\042\162\043\065\044" +
    "\034\045\013\051\035\052\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\042\213\043\065\044\034\045" +
    "\013\051\035\052\010\001\001\000\012\043\167\055\174" +
    "\061\166\062\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\042\176\043" +
    "\065\044\034\045\013\051\035\052\010\001\001\000\002" +
    "\001\001\000\012\043\167\055\200\061\166\062\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\053\204" +
    "\054\150\063\205\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\053\204" +
    "\054\150\063\210\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\042\217\043\065\044\034\045" +
    "\013\051\035\052\010\064\220\001\001\000\004\065\222" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\042\237\043\065\044" +
    "\034\045\013\051\035\052\010\001\001\000\002\001\001" +
    "\000\016\042\241\043\065\044\034\045\013\051\035\052" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\022\247\023\250\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\022\252\023\250\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\021\050\034\257\042\075\043\065" +
    "\044\034\045\013\051\035\052\010\001\001\000\022\021" +
    "\050\034\256\042\075\043\065\044\034\045\013\051\035" +
    "\052\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\021\050\034\262\042\075\043\065" +
    "\044\034\045\013\051\035\052\010\001\001\000\002\001" +
    "\001\000\020\042\217\043\065\044\034\045\013\051\035" +
    "\052\010\064\264\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\043\167" +
    "\055\273\056\272\057\274\061\166\062\173\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\021\050\034\276\042\075\043\065\044" +
    "\034\045\013\051\035\052\010\001\001\000\002\001\001" +
    "\000\020\042\302\043\065\044\034\045\013\051\035\052" +
    "\010\060\301\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\042\305\043\065\044\034\045" +
    "\013\051\035\052\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\043\167\055\310\061" +
    "\166\062\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\042\315\043" +
    "\065\044\034\045\013\051\035\052\010\001\001\000\002" +
    "\001\001\000\076\005\020\006\006\007\007\011\017\012" +
    "\043\013\047\014\066\015\037\017\063\020\057\021\050" +
    "\024\036\025\027\026\025\027\016\030\014\032\061\033" +
    "\005\034\051\035\026\036\064\037\321\040\316\041\045" +
    "\042\041\043\065\044\034\045\013\051\035\052\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\021\050\034\324\042\075\043" +
    "\065\044\034\045\013\051\035\052\010\001\001\000\002" +
    "\001\001\000\074\005\020\006\006\007\007\011\017\012" +
    "\043\013\047\014\066\015\037\017\063\020\057\021\050" +
    "\024\036\025\027\026\025\027\016\030\014\032\061\033" +
    "\005\034\051\035\026\036\064\040\326\041\045\042\041" +
    "\043\065\044\034\045\013\051\035\052\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\042\370\043\065" +
    "\044\034\045\013\051\035\052\010\001\001\000\022\021" +
    "\050\034\367\042\075\043\065\044\034\045\013\051\035" +
    "\052\010\001\001\000\002\001\001\000\022\021\050\034" +
    "\363\042\075\043\065\044\034\045\013\051\035\052\010" +
    "\001\001\000\002\001\001\000\074\005\020\006\006\007" +
    "\007\011\017\012\043\013\047\014\066\015\037\017\063" +
    "\020\057\021\050\024\036\025\027\026\025\027\016\030" +
    "\014\032\061\033\005\034\051\035\026\036\064\040\355" +
    "\041\045\042\041\043\065\044\034\045\013\051\035\052" +
    "\010\001\001\000\074\005\020\006\006\007\007\011\017" +
    "\012\043\013\047\014\066\015\037\017\063\020\057\021" +
    "\050\024\036\025\027\026\025\027\016\030\014\032\061" +
    "\033\005\034\051\035\026\036\064\040\347\041\045\042" +
    "\041\043\065\044\034\045\013\051\035\052\010\001\001" +
    "\000\022\021\050\034\346\042\075\043\065\044\034\045" +
    "\013\051\035\052\010\001\001\000\016\042\345\043\065" +
    "\044\034\045\013\051\035\052\010\001\001\000\016\042" +
    "\344\043\065\044\034\045\013\051\035\052\010\001\001" +
    "\000\016\042\343\043\065\044\034\045\013\051\035\052" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\076\005" +
    "\020\006\006\007\007\011\017\012\043\013\047\014\066" +
    "\015\037\017\063\020\057\021\050\024\036\025\027\026" +
    "\025\027\016\030\014\032\061\033\005\034\051\035\026" +
    "\036\064\037\317\040\316\041\045\042\041\043\065\044" +
    "\034\045\013\051\035\052\010\001\001\000\016\042\132" +
    "\043\065\044\034\045\013\051\035\052\010\001\001\000" +
    "\076\005\020\006\006\007\007\011\017\012\043\013\047" +
    "\014\066\015\037\017\063\020\057\021\050\024\036\025" +
    "\027\026\025\027\016\030\014\032\061\033\005\034\051" +
    "\035\026\036\064\037\353\040\316\041\045\042\041\043" +
    "\065\044\034\045\013\051\035\052\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\076\005" +
    "\020\006\006\007\007\011\017\012\043\013\047\014\066" +
    "\015\037\017\063\020\057\021\050\024\036\025\027\026" +
    "\025\027\016\030\014\032\061\033\005\034\051\035\026" +
    "\036\064\037\317\040\316\041\045\042\041\043\065\044" +
    "\034\045\013\051\035\052\010\001\001\000\016\042\132" +
    "\043\065\044\034\045\013\051\035\052\010\001\001\000" +
    "\076\005\020\006\006\007\007\011\017\012\043\013\047" +
    "\014\066\015\037\017\063\020\057\021\050\024\036\025" +
    "\027\026\025\027\016\030\014\032\061\033\005\034\051" +
    "\035\026\036\064\037\361\040\316\041\045\042\041\043" +
    "\065\044\034\045\013\051\035\052\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\021\050\034\366\042\075\043\065\044\034" +
    "\045\013\051\035\052\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\021\050\034\372" +
    "\042\075\043\065\044\034\045\013\051\035\052\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\376" +
    "\001\001\000\004\051\u0104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\074\005\020\006\006" +
    "\007\007\011\017\012\043\013\047\014\066\015\037\017" +
    "\063\020\057\021\050\024\036\025\027\026\025\027\016" +
    "\030\014\032\061\033\005\034\051\035\026\036\064\040" +
    "\u0102\041\045\042\041\043\065\044\034\045\013\051\035" +
    "\052\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\074\005\020\006\006\007\007\011\017" +
    "\012\043\013\047\014\066\015\037\017\063\020\057\021" +
    "\050\024\036\025\027\026\025\027\016\030\014\032\061" +
    "\033\005\034\051\035\026\036\064\040\u0106\041\045\042" +
    "\041\043\065\044\034\045\013\051\035\052\010\001\001" +
    "\000\004\010\u0107\001\001\000\002\001\001\000\004\016" +
    "\u0109\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\u010d\001\001\000\002\001\001\000\002\001\001\000" +
    "\074\005\020\006\006\007\007\011\017\012\043\013\047" +
    "\014\066\015\037\017\063\020\057\021\050\024\036\025" +
    "\027\026\025\027\016\030\014\032\061\033\005\034\051" +
    "\035\026\036\064\040\u010f\041\045\042\041\043\065\044" +
    "\034\045\013\051\035\052\010\001\001\000\004\016\u0110" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\u0114\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\042\u0116\043\065\044\034\045\013\051\035\052\010\001" +
    "\001\000\002\001\001\000\004\031\u0118\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\074\005\020\006" +
    "\006\007\007\011\017\012\043\013\047\014\066\015\037" +
    "\017\063\020\057\021\050\024\036\025\027\026\025\027" +
    "\016\030\014\032\061\033\005\034\051\035\026\036\064" +
    "\040\u0122\041\045\042\041\043\065\044\034\045\013\051" +
    "\035\052\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\042\u0128\043\065\044\034\045\013\051\035\052\010" +
    "\001\001\000\002\001\001\000\074\005\020\006\006\007" +
    "\007\011\017\012\043\013\047\014\066\015\037\017\063" +
    "\020\057\021\050\024\036\025\027\026\025\027\016\030" +
    "\014\032\061\033\005\034\051\035\026\036\064\040\u012a" +
    "\041\045\042\041\043\065\044\034\045\013\051\035\052" +
    "\010\001\001\000\002\001\001\000\074\005\020\006\006" +
    "\007\007\011\017\012\043\013\047\014\066\015\037\017" +
    "\063\020\057\021\050\024\036\025\027\026\025\027\016" +
    "\030\014\032\061\033\005\034\051\035\026\036\064\040" +
    "\u012c\041\045\042\041\043\065\044\034\045\013\051\035" +
    "\052\010\001\001\000\002\001\001\000\024\042\u0130\043" +
    "\065\044\034\045\013\046\u012e\047\u012f\050\u0131\051\035" +
    "\052\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\042\u0134\043\065\044\034\045\013\051\035\052\010\001" +
    "\001\000\002\001\001\000\024\042\u0130\043\065\044\034" +
    "\045\013\046\u0136\047\u012f\050\u0131\051\035\052\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\u013e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\021\050\034" +
    "\u0142\042\075\043\065\044\034\045\013\051\035\052\010" +
    "\001\001\000\002\001\001\000\074\005\020\006\006\007" +
    "\007\011\017\012\043\013\047\014\066\015\037\017\063" +
    "\020\057\021\050\024\036\025\027\026\025\027\016\030" +
    "\014\032\061\033\005\034\051\035\026\036\064\040\u0144" +
    "\041\045\042\041\043\065\044\034\045\013\051\035\052" +
    "\010\001\001\000\002\001\001\000\010\053\204\054\150" +
    "\063\u0146\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$OCLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$OCLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$OCLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public String module = "";

	public OCLParser(java_cup.runtime.Scanner s, String mod) {
		super(s);

		module = mod;
	}

	public void report_fatal_error(String message, Object info) throws ParserException {
		Token token = (Token) info;
	
		throw new ParserException(message, module, token.line + 1, token.column + 1);
	}
	
	public void report_error(String message, Object info) {
		report_fatal_error(message, info);
	}

	public void unrecovered_syntax_error(Symbol token) {
		report_fatal_error("Unexpected token.", token);
	}

	public void syntax_error(Symbol token) {
		report_fatal_error("Unexpected token.", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$OCLParser$actions {
  private final OCLParser parser;

  /** Constructor */
  CUP$OCLParser$actions(OCLParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$OCLParser$do_action(
    int                        CUP$OCLParser$act_num,
    java_cup.runtime.lr_parser CUP$OCLParser$parser,
    java.util.Stack            CUP$OCLParser$stack,
    int                        CUP$OCLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$OCLParser$result;

      /* select the action based on the action number */
      switch (CUP$OCLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // argumentsCS_trail ::= COMMA OclExpressionCS argumentsCS_trail 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new SequentialExpression(e, t);  														RESULT.line = eleft  + 1;	RESULT.column = tright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("argumentsCS_trail",51, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // argumentsCS_trail ::= 
            {
              Expression RESULT =null;
		 RESULT = new EmptyExpression(); 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("argumentsCS_trail",51, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // argumentsCS ::= OclExpressionCS argumentsCS_trail 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new SequentialExpression(e, t);  														RESULT.line = eleft  + 1;	RESULT.column = tright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("argumentsCS",50, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // argumentsCS ::= 
            {
              Expression RESULT =null;
		 RESULT = new EmptyExpression(); 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("argumentsCS",50, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // VariableDeclarationListCS ::= VariableDeclarationCS COMMA VariableDeclarationListCS 
            {
              FieldDeclaration RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		VariableDeclaration v1 = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		FieldDeclaration v2 = (FieldDeclaration)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new SequentialFieldDeclaration(new VariableFieldDeclaration(v1), v2);					RESULT.line = v1left + 1;	RESULT.column = v2right + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("VariableDeclarationListCS",49, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // VariableDeclarationListCS ::= VariableDeclarationCS 
            {
              FieldDeclaration RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		VariableDeclaration v1 = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new VariableFieldDeclaration(v1);														RESULT.line = v1left + 1;	RESULT.column = v1right + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("VariableDeclarationListCS",49, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // tupleTypeCS ::= TUPLETYPE LEFTPAR VariableDeclarationListCS RIGHTPAR 
            {
              RecordTypeDeclaration RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("tupleTypeCS",48, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-3)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // tupleTypeCS ::= TUPLETYPE LEFTPAR RIGHTPAR 
            {
              RecordTypeDeclaration RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("tupleTypeCS",48, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // collectionTypeCS ::= CollectionTypeIdentifierCS LEFTPAR typeCS RIGHTPAR 
            {
              TypeDeclaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).right;
		TypeDeclaration t = (TypeDeclaration)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).value;
		 RESULT = t; t.VIDE_isCollection = true; 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("collectionTypeCS",47, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-3)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // typeCS ::= tupleTypeCS 
            {
              TypeDeclaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		RecordTypeDeclaration t = (RecordTypeDeclaration)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = t; 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("typeCS",43, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // typeCS ::= collectionTypeCS 
            {
              TypeDeclaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		TypeDeclaration t = (TypeDeclaration)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = t; 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("typeCS",43, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // typeCS ::= pathNameCS 
            {
              TypeDeclaration RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		CompoundName n = (CompoundName)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new NamedTypeDeclaration(n);  															RESULT.line = nleft  + 1;	RESULT.column = nright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("typeCS",43, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // typeCS ::= simpleNameCS 
            {
              TypeDeclaration RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new NamedTypeDeclaration(new Name(n)); 													RESULT.line = nleft  + 1;	RESULT.column = nright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("typeCS",43, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // VariableDeclarationCS_strict ::= simpleNameCS EQUAL OclExpressionCS 
            {
              VariableDeclaration RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new VariableDeclaration(new Name(n), null, new CardinalityDeclaration(), e); 			RESULT.line = nleft  + 1;	RESULT.column = eright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("VariableDeclarationCS_strict",42, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // VariableDeclarationCS_strict ::= simpleNameCS COLON typeCS EQUAL OclExpressionCS 
            {
              VariableDeclaration RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		TypeDeclaration t = (TypeDeclaration)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new VariableDeclaration(new Name(n), t,    new CardinalityDeclaration(), e); 			RESULT.line = nleft  + 1;	RESULT.column = eright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("VariableDeclarationCS_strict",42, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // VariableDeclarationCS_strict ::= simpleNameCS COLON typeCS 
            {
              VariableDeclaration RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		TypeDeclaration t = (TypeDeclaration)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new VariableDeclaration(new Name(n), t,    new CardinalityDeclaration(), null); 		RESULT.line = nleft  + 1;	RESULT.column = tright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("VariableDeclarationCS_strict",42, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // VariableDeclarationCS ::= simpleNameCS 
            {
              VariableDeclaration RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new VariableDeclaration(new Name(n), null, new CardinalityDeclaration(), null); 		RESULT.line = nleft  + 1;	RESULT.column = nright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("VariableDeclarationCS",41, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // VariableDeclarationCS ::= VariableDeclarationCS_strict 
            {
              VariableDeclaration RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		VariableDeclaration v = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = v; 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("VariableDeclarationCS",41, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // TupleLiteralExpCS ::= TUPLE LEFTBRACE VariableDeclarationListCS RIGHTBRACE 
            {
              Expression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).right;
		FieldDeclaration v = (FieldDeclaration)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).value;
		 RESULT = OCLSBQLGenerator.generateTupleExpression(v, parser);									RESULT.line = vleft  + 1;	RESULT.column = vright  + 1;   	 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("TupleLiteralExpCS",40, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-3)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // PrimitiveLiteralExpCS ::= DateLiteralExpCS 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Date l = (Date)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new DateExpression(new DateLiteral(l));			    									RESULT.line = lleft  + 1;	RESULT.column = lright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("PrimitiveLiteralExpCS",39, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // PrimitiveLiteralExpCS ::= BooleanLiteralExpCS 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Boolean l = (Boolean)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new BooleanExpression(new BooleanLiteral(l));	    									RESULT.line = lleft  + 1;	RESULT.column = lright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("PrimitiveLiteralExpCS",39, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // PrimitiveLiteralExpCS ::= StringLiteralExpCS 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new StringExpression(new StringLiteral(l)); 	   										RESULT.line = lleft  + 1;	RESULT.column = lright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("PrimitiveLiteralExpCS",39, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // PrimitiveLiteralExpCS ::= RealLiteralExpCS 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Double l = (Double)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new RealExpression(new RealLiteral(l)); 	   											RESULT.line = lleft  + 1;	RESULT.column = lright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("PrimitiveLiteralExpCS",39, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // PrimitiveLiteralExpCS ::= IntegerLiteralExpCS 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Integer l = (Integer)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new IntegerExpression(new IntegerLiteral(l)); 	   										RESULT.line = lleft  + 1;	RESULT.column = lright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("PrimitiveLiteralExpCS",39, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CollectionRangeCS ::= OclExpressionCS DOUBLEDOT OclExpressionCS 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = OCLSBQLGenerator.generateRangeExpression(e1, e2, parser);								RESULT.line = e1left + 1;	RESULT.column = e2right + 1;   	 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("CollectionRangeCS",38, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CollectionLiteralPartCS ::= OclExpressionCS 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = e; 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("CollectionLiteralPartCS",37, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CollectionLiteralPartCS ::= CollectionRangeCS 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = e; 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("CollectionLiteralPartCS",37, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CollectionLiteralPartsCS ::= CollectionLiteralPartCS COMMA CollectionLiteralPartsCS 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new CommaExpression(e1, e2); 															RESULT.line = e1left + 1;	RESULT.column = e2right + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("CollectionLiteralPartsCS",36, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CollectionLiteralPartsCS ::= CollectionLiteralPartCS 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = e1; 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("CollectionLiteralPartsCS",36, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CollectionLiteralExpCS ::= CollectionTypeIdentifierCS LEFTBRACE CollectionLiteralPartsCS RIGHTBRACE 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).value;
		 RESULT = new BagExpression(e); 																	RESULT.line = eleft  + 1;	RESULT.column = tright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("CollectionLiteralExpCS",35, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-3)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CollectionLiteralExpCS ::= CollectionTypeIdentifierCS LEFTBRACE RIGHTBRACE 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		 RESULT = new BagExpression(new IntersectExpression(new IntegerExpression(new IntegerLiteral(1)), new IntegerExpression(new IntegerLiteral(2)))); RESULT.line = tleft + 1; RESULT.column = tright + 1; 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("CollectionLiteralExpCS",35, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // LiteralExpCS ::= PrimitiveLiteralExpCS 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = e; 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("LiteralExpCS",34, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // LiteralExpCS ::= TupleLiteralExpCS 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = e; 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("LiteralExpCS",34, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LiteralExpCS ::= CollectionLiteralExpCS 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = e; 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("LiteralExpCS",34, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // pathNameCS ::= pathNameCS DOUBLECOLON simpleNameCS 
            {
              CompoundName RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		CompoundName n1 = (CompoundName)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new CompoundName(n1, new Name(n2));					 			
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("pathNameCS",33, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // pathNameCS ::= simpleNameCS DOUBLECOLON simpleNameCS 
            {
              CompoundName RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new CompoundName(new CompoundName(new Name(n1)), new Name(n2)); 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("pathNameCS",33, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OclExpressionCS ::= LEFTPAR OclExpressionCS RIGHTPAR 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).value;
		 RESULT = e; 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OclExpressionCS",32, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OclExpressionCS ::= LiteralExpCS 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = e; 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OclExpressionCS",32, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OclExpressionCS ::= pathNameCS 
            {
              Expression RESULT =null;
		 RESULT = new StringExpression(new StringLiteral("TO DO - NYI 010")); 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OclExpressionCS",32, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OclExpressionCS ::= pathNameCS LEFTPAR argumentsCS RIGHTPAR 
            {
              Expression RESULT =null;
		 RESULT = new StringExpression(new StringLiteral("TO DO - NYI 009")); 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OclExpressionCS",32, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-3)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OclExpressionCS ::= simpleNameCS LEFTPAR OclExpressionCS COMMA OclExpressionCS argumentsCS_trail RIGHTPAR 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-6)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).value;
		 RESULT = OCLSBQLGenerator.generateProcedureCall(n, new SequentialExpression(e1, new SequentialExpression(e2, t)), parser);  RESULT.line = nleft  + 1;	RESULT.column = tright  + 1; 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OclExpressionCS",32, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-6)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OclExpressionCS ::= simpleNameCS LEFTPAR RIGHTPAR 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		 RESULT = OCLSBQLGenerator.generateProcedureCall(n, new EmptyExpression(), parser);				RESULT.line = nleft  + 1;	RESULT.column = nright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OclExpressionCS",32, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OclExpressionCS ::= simpleNameCS 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new NameExpression(new Name(n));														RESULT.line = nleft  + 1;	RESULT.column = nright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OclExpressionCS",32, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OclExpressionCS ::= OclExpressionCS DOT simpleNameCS 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new DotExpression(e, new NameExpression(new Name(n)));     								RESULT.line = eleft  + 1;	RESULT.column = nright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OclExpressionCS",32, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OclExpressionCS ::= OclExpressionCS DOT simpleNameCS LEFTPAR argumentsCS RIGHTPAR 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-5)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).value;
		 RESULT = OCLSBQLGenerator.generateOrdinaryCall(e1, n, e2, parser);     							RESULT.line = e1left + 1;	RESULT.column = e2right + 1;    
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OclExpressionCS",32, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-5)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OclExpressionCS ::= OclExpressionCS RIGHTARROW simpleNameCS LEFTPAR OclExpressionCS argumentsCS_trail RIGHTPAR 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-6)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).value;
		 RESULT = OCLSBQLGenerator.generateCollectionCallWithArgs(e1, n, e2, t, parser);					RESULT.line = e1left + 1;	RESULT.column = tright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OclExpressionCS",32, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-6)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OclExpressionCS ::= OclExpressionCS RIGHTARROW simpleNameCS LEFTPAR RIGHTPAR 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		 RESULT = OCLSBQLGenerator.generateCollectionCallNoArgs(e, n, parser);							RESULT.line = eleft  + 1;	RESULT.column = nright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OclExpressionCS",32, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OclExpressionCS ::= OclExpressionCS RIGHTARROW simpleNameCS LEFTPAR OclExpressionCS COMMA VariableDeclarationCS VERT OclExpressionCS RIGHTPAR 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-9)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-9)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-7)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-7)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-7)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-5)).right;
		Expression v1 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-3)).right;
		VariableDeclaration v2 = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).value;
		 RESULT = OCLSBQLGenerator.generateDoubleVariableIteratorWithTrick(e1, n, v1, v2, e2, parser);	RESULT.line = e1left + 1;	RESULT.column = e2right + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OclExpressionCS",32, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-9)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OclExpressionCS ::= OclExpressionCS RIGHTARROW simpleNameCS LEFTPAR VariableDeclarationCS_strict COMMA VariableDeclarationCS VERT OclExpressionCS RIGHTPAR 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-9)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-9)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-7)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-7)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-7)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-5)).right;
		VariableDeclaration v1 = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-3)).right;
		VariableDeclaration v2 = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).value;
		 RESULT = OCLSBQLGenerator.generateDoubleVariableIterator(e1, n, v1, v2, e2, parser);				RESULT.line = e1left + 1;	RESULT.column = e2right + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OclExpressionCS",32, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-9)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OclExpressionCS ::= OclExpressionCS RIGHTARROW simpleNameCS LEFTPAR VariableDeclarationCS VERT OclExpressionCS RIGHTPAR 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-7)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-3)).right;
		VariableDeclaration v = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).value;
		 RESULT = OCLSBQLGenerator.generateSingleVariableIterator(e1, n, v, e2, parser);					RESULT.line = e1left + 1;	RESULT.column = e2right + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OclExpressionCS",32, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-7)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OclExpressionCS ::= simpleNameCS OclExpressionCS 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = OCLSBQLGenerator.generatePrefixCall(n, e, parser);  									RESULT.line = nleft  + 1; 	RESULT.column = nright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OclExpressionCS",32, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OclExpressionCS ::= MINUS OclExpressionCS 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new SimpleUnaryExpression(e, Operator.opMinus); 										RESULT.line = eleft  + 1;	RESULT.column = eright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OclExpressionCS",32, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OclExpressionCS ::= OclExpressionCS simpleNameCS OclExpressionCS 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = OCLSBQLGenerator.generateInfixCall(e1, n, e2, parser); 									RESULT.line = e1left + 1;	RESULT.column = e2right + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OclExpressionCS",32, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OclExpressionCS ::= OclExpressionCS DIVIDE OclExpressionCS 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new SimpleBinaryExpression(e1, e2, Operator.opDivide); 									RESULT.line = e1left + 1; 	RESULT.column = e2right + 1; 	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OclExpressionCS",32, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OclExpressionCS ::= OclExpressionCS TIMES OclExpressionCS 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new SimpleBinaryExpression(e1, e2, Operator.opMultiply); 							    RESULT.line = e1left + 1; 	RESULT.column = e2right + 1; 	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OclExpressionCS",32, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OclExpressionCS ::= OclExpressionCS MINUS OclExpressionCS 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new SimpleBinaryExpression(e1, e2, Operator.opMinus); 									RESULT.line = e1left + 1; 	RESULT.column = e2right + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OclExpressionCS",32, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OclExpressionCS ::= OclExpressionCS PLUS OclExpressionCS 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new SimpleBinaryExpression(e1, e2, Operator.opPlus); 									RESULT.line = e1left + 1; 	RESULT.column = e2right + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OclExpressionCS",32, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OclExpressionCS ::= OclExpressionCS LOWEREQUALS OclExpressionCS 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new SimpleBinaryExpression(e1, e2, Operator.opLowerEquals); 							RESULT.line = e1left + 1; 	RESULT.column = e2right + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OclExpressionCS",32, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OclExpressionCS ::= OclExpressionCS GREATEREQUALS OclExpressionCS 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new SimpleBinaryExpression(e1, e2, Operator.opGreaterEquals); 							RESULT.line = e1left + 1; 	RESULT.column = e2right + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OclExpressionCS",32, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OclExpressionCS ::= OclExpressionCS LOWER OclExpressionCS 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new SimpleBinaryExpression(e1, e2, Operator.opLower); 									RESULT.line = e1left + 1; 	RESULT.column = e2right + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OclExpressionCS",32, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OclExpressionCS ::= OclExpressionCS GREATER OclExpressionCS 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new SimpleBinaryExpression(e1, e2, Operator.opGreater); 								RESULT.line = e1left + 1; 	RESULT.column = e2right + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OclExpressionCS",32, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OclExpressionCS ::= OclExpressionCS DIFFERENT OclExpressionCS 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new EqualityExpression(e1, e2, Operator.opDifferent); 									RESULT.line = e1left + 1; 	RESULT.column = e2right + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OclExpressionCS",32, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OclExpressionCS ::= OclExpressionCS EQUAL OclExpressionCS 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new EqualityExpression(e1, e2, Operator.opEquals); 										RESULT.line = e1left + 1; 	RESULT.column = e2right + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OclExpressionCS",32, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OclExpressionCS ::= IF OclExpressionCS THEN OclExpressionCS ELSE OclExpressionCS ENDIF 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-5)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-3)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).right;
		Expression e3 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).value;
		 RESULT = new IfThenElseExpression(e1, e2, e3); 													RESULT.line = e1left + 1; 	RESULT.column = e1right + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OclExpressionCS",32, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-6)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OclExpressionCS ::= LET VariableDeclarationListCS IN OclExpressionCS 
            {
              Expression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		FieldDeclaration v = (FieldDeclaration)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = OCLSBQLGenerator.generateLetExpression(v, e, parser);									RESULT.line = vleft  + 1; 	RESULT.column = eright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("OclExpressionCS",32, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-3)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CollectionRangeVCS ::= TIMES 
            {
              CardinalityDeclaration RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("CollectionRangeVCS",46, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CollectionRangeVCS ::= OclExpressionCS DOUBLEDOT TIMES 
            {
              CardinalityDeclaration RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("CollectionRangeVCS",46, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CollectionRangeVCS ::= OclExpressionCS DOUBLEDOT OclExpressionCS 
            {
              CardinalityDeclaration RESULT =null;

              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("CollectionRangeVCS",46, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // collectionTypeVCS ::= CollectionTypeIdentifierCS LEFTSQUARE CollectionRangeVCS RIGHTSQUARE LEFTPAR typeCS RIGHTPAR 
            {
              TypeDeclaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-6)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)).right;
		CardinalityDeclaration r = (CardinalityDeclaration)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).right;
		TypeDeclaration t = (TypeDeclaration)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).value;
		 RESULT = t; t.VIDE_isCollection = true; 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("collectionTypeVCS",45, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-6)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // typeVCS ::= collectionTypeVCS 
            {
              TypeDeclaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		TypeDeclaration t = (TypeDeclaration)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = t; 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("typeVCS",44, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // typeVCS ::= typeCS 
            {
              TypeDeclaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		TypeDeclaration t = (TypeDeclaration)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = t; 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("typeVCS",44, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VariableDeclarationVCS ::= simpleNameCS COLON typeVCS EQUAL VideExpressionVCS 
            {
              VariableDeclaration RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		TypeDeclaration t = (TypeDeclaration)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = OCLSBQLGenerator.generateVariableDeclaration(n, t, e,    parser); 						RESULT.line = nleft  + 1;	RESULT.column = eright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("VariableDeclarationVCS",28, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VariableDeclarationVCS ::= simpleNameCS COLON typeVCS 
            {
              VariableDeclaration RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		TypeDeclaration t = (TypeDeclaration)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = OCLSBQLGenerator.generateVariableDeclaration(n, t, null, parser); 						RESULT.line = nleft  + 1;	RESULT.column = tright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("VariableDeclarationVCS",28, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VideExpressionVCS ::= createExpressionVCS 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = e; 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("VideExpressionVCS",26, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VideExpressionVCS ::= OclExpressionCS 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = e; 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("VideExpressionVCS",26, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // simpleNamesListVCS ::= simpleNameCS COMMA simpleNamesListVCS 
            {
              Vector<Name> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Vector<Name> v = (Vector<Name>)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = v;					 RESULT.add(new Name(n)); 	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("simpleNamesListVCS",23, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // simpleNamesListVCS ::= simpleNameCS 
            {
              Vector<Name> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new Vector<Name>(5); RESULT.add(new Name(n)); 	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("simpleNamesListVCS",23, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // unlinkStatementVCS ::= OclExpressionCS UNLINK simpleNamesListVCS FROM OclExpressionCS 
            {
              Statement RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		Vector<Name> v = (Vector<Name>)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = OCLSBQLGenerator.generateUnlinkStatement(e1, v, e2,   parser);							RESULT.line = e1left + 1;	RESULT.column = e2right + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("unlinkStatementVCS",22, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // unlinkStatementVCS ::= OclExpressionCS UNLINK simpleNamesListVCS 
            {
              Statement RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Vector<Name> v = (Vector<Name>)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = OCLSBQLGenerator.generateUnlinkStatement(e1, v, null, parser);							RESULT.line = e1left + 1;	RESULT.column = vright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("unlinkStatementVCS",22, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // linkStatementVCS ::= VideExpressionVCS LINK simpleNameCS TO VideExpressionVCS 
            {
              Statement RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = OCLSBQLGenerator.generateLinkStatement(e1, n, e2, parser);								RESULT.line = e1left + 1;	RESULT.column = e2right + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("linkStatementVCS",21, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // deleteStatementVCS ::= OclExpressionCS DELETE 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).value;
		 RESULT = new ExpressionStatement(new DeleteExpression(e));										RESULT.line = eleft  + 1;	RESULT.column = eright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("deleteStatementVCS",20, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // replaceStatementVCS ::= VideExpressionVCS REPLACE VideExpressionVCS 
            {
              Statement RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = OCLSBQLGenerator.generateReplaceStatement(e1, e2, parser);								RESULT.line = e1left + 1;	RESULT.column = e2right + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("replaceStatementVCS",19, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // insertStatementVCS ::= VideExpressionVCS INSERT VideExpressionVCS 
            {
              Statement RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = OCLSBQLGenerator.generateInsertStatement(e1, e2, parser);								RESULT.line = e1left + 1;	RESULT.column = e2right + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("insertStatementVCS",18, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // initStatementVCS ::= simpleNameCS INSERT VideExpressionVCS 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = OCLSBQLGenerator.generateInitStatement(n, e, false);									RESULT.line = nleft  + 1;	RESULT.column = eright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("initStatementVCS",17, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // initStatementVCS ::= LINK simpleNameCS TO VideExpressionVCS 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = OCLSBQLGenerator.generateInitStatement(n, e, true);										RESULT.line = nleft  + 1;	RESULT.column = eright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("initStatementVCS",17, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-3)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // initStatementVCS ::= simpleNameCS ASSIGN VideExpressionVCS 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = OCLSBQLGenerator.generateInitStatement(n, e, false);									RESULT.line = nleft  + 1;	RESULT.column = eright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("initStatementVCS",17, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // initStatementsVCS ::= initStatementVCS SEMICOLON initStatementsVCS 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new CommaExpression(e, t);																RESULT.line = eleft  + 1;	RESULT.column = tright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("initStatementsVCS",16, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // initStatementsVCS ::= initStatementVCS 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = e;																						RESULT.line = eleft  + 1;	RESULT.column = eright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("initStatementsVCS",16, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // createExpressionVCS ::= simpleNameCS CREATE LEFTBRACE initStatementsVCS RIGHTBRACE 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).value;
		 RESULT = new CreateExpression(new Name(n),e);											RESULT.line = nleft  + 1;	RESULT.column = eright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("createExpressionVCS",15, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // createExpressionVCS ::= simpleNameCS CREATE 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).value;
		 RESULT = new CreateExpression(new Name(n),new EmptyExpression());						RESULT.line = nleft  + 1;	RESULT.column = nright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("createExpressionVCS",15, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // nopStatementVCS ::= NOP 
            {
              Statement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new EmptyStatement();																	RESULT.line = nleft  + 1;	RESULT.column = nright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("nopStatementVCS",14, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // returnStatementVCS ::= RETURN VideExpressionVCS 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new ReturnWithValueStatement(e);														RESULT.line = eleft  + 1;	RESULT.column = eright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("returnStatementVCS",13, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // returnStatementVCS ::= RETURN 
            {
              Statement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new ReturnWithoutValueStatement();														RESULT.line = rleft  + 1;	RESULT.column = rright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("returnStatementVCS",13, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // throwStatementVCS ::= THROW VideExpressionVCS 
            {
              Statement RESULT =null;
		 RESULT = new ExpressionStatement(new StringExpression(new StringLiteral("No exceptions implemented in ODRA (throwStatementVCS)"))); 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("throwStatementVCS",11, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // catchPartsVCS ::= CATCH LEFTPAR VariableDeclarationVCS RIGHTPAR statementVCS catchPartsVCS 
            {
              Statement RESULT =null;
		 RESULT = new ExpressionStatement(new StringExpression(new StringLiteral("No exceptions implemented in ODRA (catchPartsVCS 2nd branch)"))); 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("catchPartsVCS",12, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-5)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // catchPartsVCS ::= CATCH LEFTPAR VariableDeclarationVCS RIGHTPAR statementVCS 
            {
              Statement RESULT =null;
		 RESULT = new ExpressionStatement(new StringExpression(new StringLiteral("No exceptions implemented in ODRA (catchPartsVCS 1st branch)"))); 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("catchPartsVCS",12, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tryStatementVCS ::= TRY statementVCS catchPartsVCS 
            {
              Statement RESULT =null;
		 RESULT = new ExpressionStatement(new StringExpression(new StringLiteral("No exceptions implemented in ODRA (tryStatementVCS)"))); 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("tryStatementVCS",10, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // doWhileStatementVCS ::= DO statementVCS WHILE LEFTPAR VideExpressionVCS RIGHTPAR 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).value;
		 RESULT = new DoWhileStatement(s, e);																RESULT.line = eleft  + 1;	RESULT.column = sright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("doWhileStatementVCS",9, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-5)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // whileStatementVCS ::= WHILE LEFTPAR VideExpressionVCS RIGHTPAR statementVCS 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new WhileStatement(e, s);																RESULT.line = eleft  + 1;	RESULT.column = sright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("whileStatementVCS",8, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // withStatementVCS ::= VideExpressionVCS WITH LEFTBRACE simpleNameCS VERT statementsVCS RIGHTBRACE 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).value;
		 RESULT = new ForEachStatement(new AsExpression(e, new Name(n)), s);								RESULT.line = eleft  + 1;	RESULT.column = sright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("withStatementVCS",25, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-6)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // withStatementVCS ::= VideExpressionVCS WITH statementVCS 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new ForEachStatement(e, s);																RESULT.line = eleft  + 1;	RESULT.column = sright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("withStatementVCS",25, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // foreachStatementVCS ::= VideExpressionVCS FOREACH LEFTBRACE simpleNameCS VERT statementsVCS RIGHTBRACE 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).value;
		 RESULT = new ForEachStatement(new AsExpression(e, new Name(n)), s);								RESULT.line = eleft  + 1;	RESULT.column = sright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("foreachStatementVCS",24, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-6)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // foreachStatementVCS ::= VideExpressionVCS FOREACH statementVCS 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new ForEachStatement(e, s);																RESULT.line = eleft  + 1;	RESULT.column = sright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("foreachStatementVCS",24, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // forStatementVCS ::= FOR LEFTPAR VariableDeclarationVCS RIGHTPAR WHILE LEFTPAR VideExpressionVCS RIGHTPAR statementVCS 
            {
              Statement RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-6)).right;
		VariableDeclaration v = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = OCLSBQLGenerator.generateForStatement(v, e, s, parser);									RESULT.line = vleft  + 1;	RESULT.column = sright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("forStatementVCS",7, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-8)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // casePartsVCS ::= CASE PrimitiveLiteralExpCS COLON statementVCS casePartsVCS 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Statement c = (Statement)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = OCLSBQLGenerator.generateCasePart(e, s, c, parser);										RESULT.line = eleft  + 1;	RESULT.column = cright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("casePartsVCS",6, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // casePartsVCS ::= CASE PrimitiveLiteralExpCS COLON statementVCS 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = OCLSBQLGenerator.generateCasePart(e, s, null, parser);									RESULT.line = eleft  + 1;	RESULT.column = sright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("casePartsVCS",6, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-3)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // switchStatementVCS ::= SWITCH LEFTPAR VideExpressionVCS RIGHTPAR LEFTBRACE casePartsVCS DEFAULT COLON statementVCS RIGHTBRACE 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-7)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)).right;
		Statement c = (Statement)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).right;
		Statement d = (Statement)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).value;
		 RESULT = OCLSBQLGenerator.generateSwitchStatement(e, c, d, parser);								RESULT.line = eleft  + 1;	RESULT.column = dright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("switchStatementVCS",5, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-9)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // switchStatementVCS ::= SWITCH LEFTPAR VideExpressionVCS RIGHTPAR LEFTBRACE casePartsVCS RIGHTBRACE 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).right;
		Statement c = (Statement)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).value;
		 RESULT = OCLSBQLGenerator.generateSwitchStatement(e, c, null, parser);							RESULT.line = eleft  + 1;	RESULT.column = cright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("switchStatementVCS",5, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-6)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ifStatementVCS ::= IF LEFTPAR OclExpressionCS RIGHTPAR statementVCS ELSE statementVCS 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new IfElseStatement(e, s1, s2); 														RESULT.line = eleft  + 1;	RESULT.column = s2right + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("ifStatementVCS",4, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-6)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ifStatementVCS ::= IF LEFTPAR OclExpressionCS RIGHTPAR statementVCS 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new IfStatement(e, s1); 																RESULT.line = eleft  + 1;	RESULT.column = s1right + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("ifStatementVCS",4, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-4)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // assignmentStatementVCS ::= VideExpressionVCS ASSIGN_DIVIDE OclExpressionCS 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = OCLSBQLGenerator.generateCPPAssigment(e1, e2, Operator.opDivide);						RESULT.line = e1left + 1;	RESULT.column = e2right + 1; 	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("assignmentStatementVCS",3, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // assignmentStatementVCS ::= VideExpressionVCS ASSIGN_MULTIPLY OclExpressionCS 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = OCLSBQLGenerator.generateCPPAssigment(e1, e2, Operator.opMultiply); 	 				RESULT.line = e1left + 1;	RESULT.column = e2right + 1; 	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("assignmentStatementVCS",3, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // assignmentStatementVCS ::= VideExpressionVCS ASSIGN_SUBTRACT OclExpressionCS 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = OCLSBQLGenerator.generateCPPAssigment(e1, e2, Operator.opMinus); 		 				RESULT.line = e1left + 1;	RESULT.column = e2right + 1; 	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("assignmentStatementVCS",3, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // assignmentStatementVCS ::= VideExpressionVCS ASSIGN_ADD OclExpressionCS 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = OCLSBQLGenerator.generateCPPAssigment(e1, e2, Operator.opPlus); 					   	RESULT.line = e1left + 1;	RESULT.column = e2right + 1; 	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("assignmentStatementVCS",3, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // assignmentStatementVCS ::= VideExpressionVCS ASSIGN VideExpressionVCS 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new AssignExpression(e1, e2, Operator.opAssign);										RESULT.line = e1left + 1;	RESULT.column = e2right + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("assignmentStatementVCS",3, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statementsVCS ::= statementVCS statementsVCS 
            {
              Statement RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).right;
		Statement e1 = (Statement)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Statement e2 = (Statement)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new SequentialStatement(e1, e2);														RESULT.line = e1left + 1;	RESULT.column = e2right + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("statementsVCS",29, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statementsVCS ::= statementVCS 
            {
              Statement RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Statement e1 = (Statement)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = e1; 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("statementsVCS",29, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // codeBlockVCS ::= LEFTBRACE statementsVCS RIGHTBRACE 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).value;
		 RESULT = e; 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("codeBlockVCS",27, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VideStatementVCS ::= VariableDeclarationVCS SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).right;
		VariableDeclaration e = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).value;
		 e.setReflevel(0); RESULT = new VariableDeclarationStatement(e);  									RESULT.line = eleft  + 1;	RESULT.column = eright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("VideStatementVCS",31, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VideStatementVCS ::= withStatementVCS 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = e; 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("VideStatementVCS",31, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VideStatementVCS ::= foreachStatementVCS 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = e; 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("VideStatementVCS",31, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VideStatementVCS ::= unlinkStatementVCS SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).value;
		 RESULT = e; 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("VideStatementVCS",31, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VideStatementVCS ::= linkStatementVCS SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).value;
		 RESULT = e; 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("VideStatementVCS",31, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VideStatementVCS ::= deleteStatementVCS SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).value;
		 RESULT = e; 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("VideStatementVCS",31, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VideStatementVCS ::= replaceStatementVCS SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).value;
		 RESULT = e; 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("VideStatementVCS",31, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VideStatementVCS ::= insertStatementVCS SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).value;
		 RESULT = e; 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("VideStatementVCS",31, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VideStatementVCS ::= nopStatementVCS SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).value;
		 RESULT = e; 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("VideStatementVCS",31, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VideStatementVCS ::= returnStatementVCS SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).value;
		 RESULT = e; 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("VideStatementVCS",31, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VideStatementVCS ::= throwStatementVCS SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).value;
		 RESULT = e; 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("VideStatementVCS",31, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VideStatementVCS ::= tryStatementVCS 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = e; 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("VideStatementVCS",31, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VideStatementVCS ::= doWhileStatementVCS 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = e; 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("VideStatementVCS",31, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VideStatementVCS ::= whileStatementVCS 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = e; 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("VideStatementVCS",31, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VideStatementVCS ::= forStatementVCS 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = e; 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("VideStatementVCS",31, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VideStatementVCS ::= switchStatementVCS 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = e; 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("VideStatementVCS",31, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VideStatementVCS ::= ifStatementVCS 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = e; 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("VideStatementVCS",31, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VideStatementVCS ::= assignmentStatementVCS SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).value;
		 RESULT = new ExpressionStatement(e); 															RESULT.line = eleft  + 1;	RESULT.column = eright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("VideStatementVCS",31, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statementVCS ::= codeBlockVCS 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = e; 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("statementVCS",30, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statementVCS ::= VideExpressionVCS SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).value;
		 RESULT = new ExpressionStatement(e);																RESULT.line = eleft  + 1;	RESULT.column = eright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("statementVCS",30, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statementVCS ::= VideStatementVCS 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = e; 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("statementVCS",30, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // StructuredActivityNodeVCS ::= simpleNameCS DOT simpleNameCS 
            {
              CompoundName RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new CompoundName(new CompoundName(new Name(n1)), new Name(n2)); 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("StructuredActivityNodeVCS",2, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // StructuredActivityNodeVCS ::= pathNameCS DOT simpleNameCS 
            {
              CompoundName RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		CompoundName n1 = (CompoundName)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = new CompoundName(n1, new Name(n2)); 							
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("StructuredActivityNodeVCS",2, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VideMethodBodyDeclVCS ::= CONTEXT StructuredActivityNodeVCS BODY statementVCS 
            {
              Statement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).right;
		CompoundName n = (CompoundName)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = OCLSBQLGenerator.installMethodBody(n, s, parser);										RESULT.line = nleft  + 1;	RESULT.column = sright  + 1;	
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("VideMethodBodyDeclVCS",1, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-3)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // VideCodeVCS ::= statementVCS 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = e; 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("VideCodeVCS",0, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // VideCodeVCS ::= VideMethodBodyDeclVCS 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$OCLParser$stack.peek()).value;
		 RESULT = e; 
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("VideCodeVCS",0, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          return CUP$OCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= VideCodeVCS EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).right;
		Statement start_val = (Statement)((java_cup.runtime.Symbol) CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)).value;
		RESULT = start_val;
              CUP$OCLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$OCLParser$stack.elementAt(CUP$OCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$OCLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$OCLParser$parser.done_parsing();
          return CUP$OCLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

