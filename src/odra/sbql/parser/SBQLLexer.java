/* The following code was generated by JFlex 1.3.5 on 8/11/14 1:33 PM */

package odra.sbql.parser;

import odra.exceptions.*;
import odra.sbql.ast.ParserException;
import java.util.Date;
import odra.util.DateUtils;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 8/11/14 1:33 PM from the specification file
 * <tt>file:/Users/greg/Documents/School/Science_Research/workspace/ODRA-with-Enums/res/lexer.lex</tt>
 */
public class SBQLLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int STRING = 1;
  final public static int BLOCKCOMMENT = 3;
  final public static int YYINITIAL = 0;
  final public static int LINECOMMENT = 2;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\16\1\20\1\0\1\16\1\17\22\0\1\10\1\41\1\75"+
    "\2\0\1\25\2\0\1\26\1\27\1\22\1\24\1\32\1\1\1\3"+
    "\1\21\1\4\1\5\1\6\1\7\2\12\4\2\1\11\1\23\1\35"+
    "\1\33\1\34\1\0\1\13\32\14\1\36\1\15\1\37\1\0\1\72"+
    "\1\0\1\45\1\64\1\65\1\46\1\52\1\61\1\55\1\51\1\54"+
    "\1\53\1\73\1\62\1\63\1\42\1\43\1\57\1\71\1\47\1\60"+
    "\1\44\1\56\1\67\1\50\1\70\1\66\1\74\1\30\1\14\1\31"+
    "\1\40\uff81\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    62,   124,   186,   248,   310,   372,   434,   248,   496, 
      558,   620,   682,   248,   248,   248,   248,   248,   248,   248, 
      248,   248,   248,   744,   806,   248,   248,   868,   930,   992, 
     1054,  1116,  1178,  1240,  1302,  1364,  1426,  1488,  1550,  1612, 
     1674,  1736,  1798,  1860,  1922,  1984,  2046,  2108,   248,   248, 
      248,  2170,   248,  2232,   310,  2294,  2356,  2294,   248,   248, 
     2418,   248,   248,   248,   248,   248,   248,   248,  2480,  2542, 
     2604,  2666,  2728,  2790,  2852,  2914,  2976,   558,  3038,  3100, 
      558,  3162,  3224,  3286,  3348,  3410,  3472,  3534,  3596,  3658, 
     3720,  3782,   558,   558,  3844,  3906,  3968,  4030,  4092,  4154, 
     4216,  4278,  4340,  4402,  4464,  4526,  4588,  4650,  4712,  4774, 
     4836,  4898,  4960,  5022,  5084,  5146,  5208,  5270,  5332,  5394, 
      248,   558,   558,  5456,  5518,  5580,  5642,  5704,   558,  5766, 
     5828,  5890,  5952,   558,  6014,   558,  6076,  6138,  6200,  6262, 
     6324,  6386,  6448,  6510,   558,  6572,  6634,  6696,  6758,  6820, 
     6882,  6944,  7006,  7068,  7130,  7192,  7254,  7316,  7378,  7440, 
     7502,  7564,  7626,  7688,  7750,   558,  7812,  7874,  7936,  7998, 
     8060,  8122,  8184,  8246,  8308,   558,   558,   558,  8370,  8432, 
     8494,  8556,  8618,  8680,  8742,  8804,  8866,  8928,  8990,  9052, 
     9114,  9176,  9238,  9300,  9362,   558,  9424,   558,  9486,   558, 
     9548,  9610,  9672,  9734,  9796,  9858,  9920,  9982, 10044, 10106, 
    10168, 10230, 10292, 10354, 10416,   558,   558, 10478, 10540,   558, 
    10602, 10664, 10726, 10788, 10850, 10912, 10974, 11036, 11098, 11160, 
    11222,   558, 11284, 11346, 11408, 11470, 11532, 11594, 11656, 11718, 
    11780, 11842, 11904, 11966, 12028, 12090, 12152, 12214, 12276, 12338, 
    12400, 12462,   558, 12524, 12586, 12648, 12710, 12772, 12834, 12896, 
    12958, 13020,   558, 13082,   558, 13144,   558, 13206, 13268, 13330, 
    13392, 13454, 13516, 13578, 13640, 13702, 13764,   558,   558, 13826, 
    13888, 13950, 14012, 14074, 14136, 14198, 14260,   558, 14322, 14384, 
    14446, 14508, 14570, 14632, 14694, 14756, 14818, 14880, 14942,   558, 
    15004,   558, 15066, 15128, 15190,   558, 15252, 15314,   558,   558, 
    15376, 15438,   558, 15500, 15562, 15624, 15686,   558, 15748, 15810, 
    15872, 15934, 15996, 16058, 16120, 16182, 16244,   558, 16306,   558, 
    16368, 16430, 16492,   558,   558, 16554, 16616, 16678,   558, 16740, 
    16802, 16864,   558, 16926, 16988, 17050,   558, 17112,   558, 17174, 
    17236, 17298, 17360,   558, 17422, 17484, 17546, 17608, 17670,   558, 
    17732, 17794,   558, 17856, 17918, 17980, 18042, 18104, 18166, 18228, 
      558,   558, 18290, 18352, 18414, 18476, 18538,   558, 18600, 18662, 
      558,   558, 18724, 18786, 18848, 18910, 18972,   558, 19034, 19096, 
    19158,   558, 19220, 19282,   558,   558,   558, 19344, 19406, 19468, 
    19530, 19592, 19654,   558, 19716, 19778, 19840, 19902, 19964, 20026, 
      558,   558, 20088,   558, 20150,   558,   558, 20212, 20274, 20336, 
    20398, 20460, 20522, 20584,   558, 20646, 20708, 20770, 20832,   558, 
      558, 20894,   248, 20956, 21018, 21080, 21142,   558, 21204,   558, 
    21266, 21328,   248,   558,   558, 21390,   558,   558,   558,   558, 
      558, 21452, 21514,   248, 21576, 21638, 21700, 21762, 21824, 21886, 
      558, 21948, 22010, 22072, 22134,   558,   558,   558, 22196, 22258, 
    22320, 22382, 22444, 22506, 22568,   558, 22630, 22692, 22754, 22816, 
    22878, 22940, 23002,   248, 23064, 23126, 23188, 23250,   248, 23312, 
      248, 23374, 23436, 23498, 23560, 23622, 23684,   248
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\5\1\6\1\7\1\10\4\7\1\11\1\12\1\7"+
    "\2\13\1\5\1\11\1\14\1\11\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\5\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\13\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\13\1\60\5\13\1\61\15\62\1\0"+
    "\1\62\2\0\54\62\1\63\17\11\1\64\1\65\74\11"+
    "\1\14\2\11\1\66\53\11\100\0\1\67\1\70\4\67"+
    "\2\0\1\67\65\0\1\71\1\70\4\71\2\0\1\71"+
    "\65\0\1\72\1\73\4\72\2\0\1\72\116\0\1\74"+
    "\1\0\1\75\42\0\1\13\1\0\4\13\2\0\1\13"+
    "\1\0\1\13\25\0\33\13\21\0\1\11\76\0\1\76"+
    "\1\77\106\0\1\100\75\0\1\101\1\102\101\0\1\103"+
    "\1\104\36\0\1\13\1\0\4\13\2\0\1\13\1\0"+
    "\1\13\25\0\1\13\1\105\31\13\3\0\1\13\1\0"+
    "\4\13\2\0\1\13\1\0\1\13\25\0\1\106\4\13"+
    "\1\107\14\13\1\110\10\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\5\13\1\111\1\13"+
    "\1\112\1\113\13\13\1\114\6\13\3\0\1\13\1\0"+
    "\4\13\2\0\1\13\1\0\1\13\25\0\1\115\15\13"+
    "\1\116\3\13\1\117\2\13\1\120\5\13\3\0\1\13"+
    "\1\0\4\13\2\0\1\13\1\0\1\13\25\0\1\13"+
    "\1\121\1\13\1\122\4\13\1\123\1\13\1\124\20\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\3\13\1\125\4\13\1\126\22\13\3\0\1\13"+
    "\1\0\4\13\2\0\1\13\1\0\1\13\25\0\7\13"+
    "\1\127\23\13\3\0\1\13\1\0\4\13\2\0\1\13"+
    "\1\0\1\13\25\0\1\130\17\13\1\131\5\13\1\132"+
    "\4\13\3\0\1\13\1\0\4\13\2\0\1\13\1\0"+
    "\1\13\25\0\1\13\1\133\31\13\3\0\1\13\1\0"+
    "\4\13\2\0\1\13\1\0\1\13\25\0\1\134\15\13"+
    "\1\135\1\136\1\13\1\137\11\13\3\0\1\13\1\0"+
    "\4\13\2\0\1\13\1\0\1\13\25\0\5\13\1\140"+
    "\25\13\3\0\1\13\1\0\4\13\2\0\1\13\1\0"+
    "\1\13\25\0\1\141\14\13\1\142\15\13\3\0\1\13"+
    "\1\0\4\13\2\0\1\13\1\0\1\13\25\0\10\13"+
    "\1\143\22\13\3\0\1\13\1\0\4\13\2\0\1\13"+
    "\1\0\1\13\25\0\2\13\1\144\5\13\1\145\3\13"+
    "\1\146\6\13\1\147\7\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\1\13\1\150\1\13"+
    "\1\151\6\13\1\152\20\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\1\13\1\153\1\13"+
    "\1\154\4\13\1\155\22\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\1\13\1\156\1\13"+
    "\1\157\6\13\1\160\20\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\3\13\1\161\1\13"+
    "\1\162\25\13\3\0\1\13\1\0\4\13\2\0\1\13"+
    "\1\0\1\13\25\0\1\13\1\163\1\13\1\164\1\13"+
    "\1\165\12\13\1\166\12\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\12\13\1\167\20\13"+
    "\21\0\1\65\76\0\1\65\56\0\1\72\1\0\4\72"+
    "\2\0\1\72\65\0\1\170\1\70\4\170\2\0\1\170"+
    "\120\0\1\171\42\0\1\13\1\0\4\13\2\0\1\13"+
    "\1\0\1\13\25\0\2\13\1\172\3\13\1\173\24\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\30\13\1\174\2\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\4\13\1\175\26\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\11\13\1\176\21\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\3\13\1\177\10\13"+
    "\1\200\7\13\1\201\6\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\5\13\1\202\2\13"+
    "\1\203\22\13\3\0\1\13\1\0\4\13\2\0\1\13"+
    "\1\0\1\13\25\0\21\13\1\204\11\13\3\0\1\13"+
    "\1\0\4\13\2\0\1\13\1\0\1\13\25\0\15\13"+
    "\1\205\15\13\3\0\1\13\1\0\4\13\2\0\1\13"+
    "\1\0\1\13\25\0\4\13\1\206\26\13\3\0\1\13"+
    "\1\0\4\13\2\0\1\13\1\0\1\13\25\0\1\13"+
    "\1\207\31\13\3\0\1\13\1\0\4\13\2\0\1\13"+
    "\1\0\1\13\25\0\13\13\1\210\17\13\3\0\1\13"+
    "\1\0\4\13\2\0\1\13\1\0\1\13\25\0\2\13"+
    "\1\211\30\13\3\0\1\13\1\0\4\13\2\0\1\13"+
    "\1\0\1\13\25\0\5\13\1\212\10\13\1\213\1\13"+
    "\1\214\12\13\3\0\1\13\1\0\4\13\2\0\1\13"+
    "\1\0\1\13\25\0\16\13\1\215\14\13\3\0\1\13"+
    "\1\0\4\13\2\0\1\13\1\0\1\13\25\0\1\216"+
    "\32\13\3\0\1\13\1\0\4\13\2\0\1\13\1\0"+
    "\1\13\25\0\1\217\1\13\1\220\14\13\1\221\3\13"+
    "\1\222\1\13\1\223\5\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\10\13\1\224\1\13"+
    "\1\225\20\13\3\0\1\13\1\0\4\13\2\0\1\13"+
    "\1\0\1\13\25\0\14\13\1\226\16\13\3\0\1\13"+
    "\1\0\4\13\2\0\1\13\1\0\1\13\25\0\16\13"+
    "\1\227\14\13\3\0\1\13\1\0\4\13\2\0\1\13"+
    "\1\0\1\13\25\0\2\13\1\230\7\13\1\231\20\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\12\13\1\232\20\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\2\13\1\233\13\13"+
    "\1\234\14\13\3\0\1\13\1\0\4\13\2\0\1\13"+
    "\1\0\1\13\25\0\15\13\1\235\15\13\3\0\1\13"+
    "\1\0\4\13\2\0\1\13\1\0\1\13\25\0\1\13"+
    "\1\236\31\13\3\0\1\13\1\0\4\13\2\0\1\13"+
    "\1\0\1\13\25\0\12\13\1\237\20\13\3\0\1\13"+
    "\1\0\4\13\2\0\1\13\1\0\1\13\25\0\4\13"+
    "\1\240\26\13\3\0\1\13\1\0\4\13\2\0\1\13"+
    "\1\0\1\13\25\0\5\13\1\241\25\13\3\0\1\13"+
    "\1\0\4\13\2\0\1\13\1\0\1\13\25\0\5\13"+
    "\1\242\25\13\3\0\1\13\1\0\4\13\2\0\1\13"+
    "\1\0\1\13\25\0\5\13\1\243\2\13\1\244\5\13"+
    "\1\245\14\13\3\0\1\13\1\0\4\13\2\0\1\13"+
    "\1\0\1\13\25\0\21\13\1\246\1\247\10\13\3\0"+
    "\1\13\1\0\4\13\2\0\1\13\1\0\1\13\25\0"+
    "\7\13\1\250\23\13\3\0\1\13\1\0\4\13\2\0"+
    "\1\13\1\0\1\13\25\0\5\13\1\251\25\13\3\0"+
    "\1\13\1\0\4\13\2\0\1\13\1\0\1\13\25\0"+
    "\20\13\1\252\12\13\3\0\1\13\1\0\4\13\2\0"+
    "\1\13\1\0\1\13\25\0\1\253\32\13\3\0\1\13"+
    "\1\0\4\13\2\0\1\13\1\0\1\13\25\0\23\13"+
    "\1\254\7\13\3\0\1\13\1\0\4\13\2\0\1\13"+
    "\1\0\1\13\25\0\32\13\1\255\3\0\1\13\1\0"+
    "\4\13\2\0\1\13\1\0\1\13\25\0\3\13\1\256"+
    "\27\13\3\0\1\13\1\0\4\13\2\0\1\13\1\0"+
    "\1\13\25\0\4\13\1\257\26\13\3\0\1\13\1\0"+
    "\4\13\2\0\1\13\1\0\1\13\25\0\26\13\1\260"+
    "\4\13\3\0\1\13\1\0\4\13\2\0\1\13\1\0"+
    "\1\13\25\0\1\261\32\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\13\13\1\262\17\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\10\13\1\263\22\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\1\264\13\13\1\265"+
    "\16\13\3\0\1\13\1\0\4\13\2\0\1\13\1\0"+
    "\1\13\25\0\2\13\1\266\30\13\3\0\1\13\1\0"+
    "\4\13\2\0\1\13\1\0\1\13\25\0\10\13\1\267"+
    "\22\13\3\0\1\13\1\0\4\13\2\0\1\13\1\0"+
    "\1\13\25\0\1\13\1\270\1\13\1\271\27\13\3\0"+
    "\1\13\1\0\4\13\2\0\1\13\1\0\1\13\25\0"+
    "\5\13\1\272\2\13\1\273\22\13\3\0\1\274\1\70"+
    "\4\274\2\0\1\274\65\0\1\13\1\0\4\13\2\0"+
    "\1\13\1\0\1\13\25\0\1\275\3\13\1\276\1\277"+
    "\6\13\1\300\16\13\3\0\1\13\1\0\4\13\2\0"+
    "\1\13\1\0\1\13\25\0\10\13\1\301\22\13\3\0"+
    "\1\13\1\0\4\13\2\0\1\13\1\0\1\13\25\0"+
    "\10\13\1\302\22\13\3\0\1\13\1\0\4\13\2\0"+
    "\1\13\1\0\1\13\25\0\1\303\32\13\3\0\1\13"+
    "\1\0\4\13\2\0\1\13\1\0\1\13\25\0\10\13"+
    "\1\304\22\13\3\0\1\13\1\0\4\13\2\0\1\13"+
    "\1\0\1\13\25\0\1\13\1\305\31\13\3\0\1\13"+
    "\1\0\4\13\2\0\1\13\1\0\1\13\25\0\1\306"+
    "\32\13\3\0\1\13\1\0\4\13\2\0\1\13\1\0"+
    "\1\13\25\0\15\13\1\307\15\13\3\0\1\13\1\0"+
    "\4\13\2\0\1\13\1\0\1\13\25\0\10\13\1\310"+
    "\22\13\3\0\1\13\1\0\4\13\2\0\1\13\1\0"+
    "\1\13\25\0\5\13\1\311\25\13\3\0\1\13\1\0"+
    "\4\13\2\0\1\13\1\0\1\13\25\0\10\13\1\312"+
    "\22\13\3\0\1\13\1\0\4\13\2\0\1\13\1\0"+
    "\1\13\25\0\10\13\1\313\22\13\3\0\1\13\1\0"+
    "\4\13\2\0\1\13\1\0\1\13\25\0\10\13\1\314"+
    "\22\13\3\0\1\13\1\0\4\13\2\0\1\13\1\0"+
    "\1\13\25\0\10\13\1\315\22\13\3\0\1\13\1\0"+
    "\4\13\2\0\1\13\1\0\1\13\25\0\2\13\1\316"+
    "\30\13\3\0\1\13\1\0\4\13\2\0\1\13\1\0"+
    "\1\13\25\0\4\13\1\317\6\13\1\320\17\13\3\0"+
    "\1\13\1\0\4\13\2\0\1\13\1\0\1\13\25\0"+
    "\3\13\1\321\27\13\3\0\1\13\1\0\4\13\2\0"+
    "\1\13\1\0\1\13\25\0\5\13\1\322\6\13\1\323"+
    "\16\13\3\0\1\13\1\0\4\13\2\0\1\13\1\0"+
    "\1\13\25\0\1\13\1\324\31\13\3\0\1\13\1\0"+
    "\4\13\2\0\1\13\1\0\1\13\25\0\10\13\1\325"+
    "\22\13\3\0\1\13\1\0\4\13\2\0\1\13\1\0"+
    "\1\13\25\0\5\13\1\326\25\13\3\0\1\13\1\0"+
    "\4\13\2\0\1\13\1\0\1\13\25\0\20\13\1\327"+
    "\12\13\3\0\1\13\1\0\4\13\2\0\1\13\1\0"+
    "\1\13\25\0\21\13\1\330\11\13\3\0\1\13\1\0"+
    "\4\13\2\0\1\13\1\0\1\13\25\0\10\13\1\331"+
    "\22\13\3\0\1\13\1\0\4\13\2\0\1\13\1\0"+
    "\1\13\25\0\10\13\1\332\22\13\3\0\1\13\1\0"+
    "\4\13\2\0\1\13\1\0\1\13\25\0\16\13\1\333"+
    "\14\13\3\0\1\13\1\0\4\13\2\0\1\13\1\0"+
    "\1\13\25\0\1\334\32\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\10\13\1\335\22\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\2\13\1\336\30\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\1\13\1\337\16\13"+
    "\1\340\12\13\3\0\1\13\1\0\4\13\2\0\1\13"+
    "\1\0\1\13\25\0\14\13\1\341\16\13\3\0\1\13"+
    "\1\0\4\13\2\0\1\13\1\0\1\13\25\0\1\13"+
    "\1\342\25\13\1\343\3\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\3\13\1\344\27\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\21\13\1\345\11\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\14\13\1\346\16\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\12\13\1\347\20\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\4\13\1\350\26\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\16\13\1\351\14\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\2\13\1\352\30\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\10\13\1\353\22\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\3\13\1\354\4\13"+
    "\1\355\5\13\1\356\14\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\16\13\1\357\14\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\3\13\1\360\27\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\3\13\1\361\27\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\24\13\1\362\6\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\25\13\1\363\5\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\14\13\1\364\16\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\3\13\1\365\27\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\2\13\1\366\30\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\1\367\32\13\3\0"+
    "\1\13\1\0\4\13\2\0\1\13\1\0\1\13\25\0"+
    "\23\13\1\370\7\13\3\0\1\13\1\0\4\13\2\0"+
    "\1\13\1\0\1\13\25\0\3\13\1\371\27\13\3\0"+
    "\1\13\1\0\4\13\2\0\1\13\1\0\1\13\25\0"+
    "\16\13\1\372\14\13\3\0\1\13\1\0\4\13\2\0"+
    "\1\13\1\0\1\13\25\0\16\13\1\373\14\13\3\0"+
    "\1\13\1\0\4\13\2\0\1\13\1\0\1\13\25\0"+
    "\2\13\1\374\30\13\3\0\1\13\1\0\4\13\2\0"+
    "\1\13\1\0\1\13\25\0\6\13\1\375\24\13\2\0"+
    "\1\376\1\67\1\70\4\67\2\0\1\67\65\0\1\13"+
    "\1\0\4\13\2\0\1\13\1\0\1\13\25\0\3\13"+
    "\1\377\4\13\1\u0100\22\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\10\13\1\u0101\22\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\10\13\1\u0102\22\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\15\13\1\u0103\15\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\5\13\1\u0104\25\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\23\13\1\u0105\7\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\16\13\1\u0106\14\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\6\13\1\u0107\24\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\1\13\1\u0108\31\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\2\13\1\u0109\30\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\15\13\1\u010a\15\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\17\13\1\u010b\13\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\5\13\1\u010c\25\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\2\13\1\u010d\30\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\12\13\1\u010e\20\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\1\13\1\u010f\31\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\10\13\1\u0110\22\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\21\13\1\u0111\11\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\12\13\1\u0112\20\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\5\13\1\u0113\25\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\5\13\1\u0114\25\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\5\13\1\u0115\25\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\10\13\1\u0116\22\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\10\13\1\u0117\22\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\1\u0118\4\13\1\u0119\25\13\3\0\1\13\1\0"+
    "\4\13\2\0\1\13\1\0\1\13\25\0\2\13\1\u011a"+
    "\30\13\3\0\1\13\1\0\4\13\2\0\1\13\1\0"+
    "\1\13\25\0\5\13\1\u011b\25\13\3\0\1\13\1\0"+
    "\4\13\2\0\1\13\1\0\1\13\25\0\3\13\1\u011c"+
    "\27\13\3\0\1\13\1\0\4\13\2\0\1\13\1\0"+
    "\1\13\25\0\5\13\1\u011d\25\13\3\0\1\13\1\0"+
    "\4\13\2\0\1\13\1\0\1\13\25\0\10\13\1\u011e"+
    "\22\13\3\0\1\13\1\0\4\13\2\0\1\13\1\0"+
    "\1\13\25\0\15\13\1\u011f\15\13\3\0\1\13\1\0"+
    "\4\13\2\0\1\13\1\0\1\13\25\0\1\u0120\32\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\14\13\1\u0121\16\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\2\13\1\u0122\30\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\3\13\1\u0123\27\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\23\13\1\u0124\7\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\3\13\1\u0125\27\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\12\13\1\u0126\20\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\5\13\1\u0127\25\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\21\13\1\u0128\11\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\20\13\1\u0129\12\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\3\13\1\u012a\27\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\1\13\1\u012b\31\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\10\13\1\u012c\22\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\20\13\1\u012d\12\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\20\13\1\u012e\12\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\30\13\1\u012f\2\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\10\13\1\u0130\22\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\20\13\1\u0131\12\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\31\13\1\u0132\1\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\3\13\1\u0133\6\13\1\u0134\20\13\3\0\1\13"+
    "\1\0\4\13\2\0\1\13\1\0\1\13\25\0\2\13"+
    "\1\u0135\30\13\3\0\1\13\1\0\4\13\2\0\1\13"+
    "\1\0\1\13\25\0\7\13\1\u0136\23\13\3\0\1\13"+
    "\1\0\4\13\2\0\1\13\1\0\1\13\25\0\2\13"+
    "\1\u0137\30\13\3\0\1\13\1\0\4\13\2\0\1\13"+
    "\1\0\1\13\25\0\10\13\1\u0138\22\13\3\0\1\13"+
    "\1\0\4\13\2\0\1\13\1\0\1\13\25\0\16\13"+
    "\1\u0139\14\13\3\0\1\13\1\0\4\13\2\0\1\13"+
    "\1\0\1\13\25\0\14\13\1\u013a\16\13\5\0\1\u013b"+
    "\1\u013c\72\0\1\13\1\0\4\13\2\0\1\13\1\0"+
    "\1\13\25\0\25\13\1\u013d\5\13\3\0\1\13\1\0"+
    "\4\13\2\0\1\13\1\0\1\13\25\0\6\13\1\u013e"+
    "\24\13\3\0\1\13\1\0\4\13\2\0\1\13\1\0"+
    "\1\13\25\0\20\13\1\u013f\12\13\3\0\1\13\1\0"+
    "\4\13\2\0\1\13\1\0\1\13\25\0\2\13\1\u0140"+
    "\30\13\3\0\1\13\1\0\4\13\2\0\1\13\1\0"+
    "\1\13\25\0\4\13\1\u0141\26\13\3\0\1\13\1\0"+
    "\4\13\2\0\1\13\1\0\1\13\25\0\22\13\1\u0142"+
    "\10\13\3\0\1\13\1\0\4\13\2\0\1\13\1\0"+
    "\1\13\25\0\2\13\1\u0143\30\13\3\0\1\13\1\0"+
    "\4\13\2\0\1\13\1\0\1\13\25\0\3\13\1\u0144"+
    "\27\13\3\0\1\13\1\0\4\13\2\0\1\13\1\0"+
    "\1\13\25\0\5\13\1\u0145\25\13\3\0\1\13\1\0"+
    "\4\13\2\0\1\13\1\0\1\13\25\0\5\13\1\u0146"+
    "\25\13\3\0\1\13\1\0\4\13\2\0\1\13\1\0"+
    "\1\13\25\0\12\13\1\u0147\20\13\3\0\1\13\1\0"+
    "\4\13\2\0\1\13\1\0\1\13\25\0\10\13\1\u0148"+
    "\22\13\3\0\1\13\1\0\4\13\2\0\1\13\1\0"+
    "\1\13\25\0\1\u0149\32\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\21\13\1\u014a\11\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\3\13\1\u014b\27\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\10\13\1\u014c\22\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\10\13\1\u014d\22\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\1\u014e\32\13\3\0"+
    "\1\13\1\0\4\13\2\0\1\13\1\0\1\13\25\0"+
    "\4\13\1\u014f\26\13\3\0\1\13\1\0\4\13\2\0"+
    "\1\13\1\0\1\13\25\0\16\13\1\u0150\14\13\3\0"+
    "\1\13\1\0\4\13\2\0\1\13\1\0\1\13\25\0"+
    "\4\13\1\u0151\26\13\3\0\1\13\1\0\4\13\2\0"+
    "\1\13\1\0\1\13\25\0\1\u0152\32\13\3\0\1\13"+
    "\1\0\4\13\2\0\1\13\1\0\1\13\25\0\16\13"+
    "\1\u0153\14\13\3\0\1\13\1\0\4\13\2\0\1\13"+
    "\1\0\1\13\25\0\16\13\1\u0154\1\u0155\13\13\3\0"+
    "\1\13\1\0\4\13\2\0\1\13\1\0\1\13\25\0"+
    "\1\u0156\32\13\3\0\1\13\1\0\4\13\2\0\1\13"+
    "\1\0\1\13\25\0\2\13\1\u0157\30\13\3\0\1\13"+
    "\1\0\4\13\2\0\1\13\1\0\1\13\25\0\21\13"+
    "\1\u0158\11\13\3\0\1\13\1\0\4\13\2\0\1\13"+
    "\1\0\1\13\25\0\3\13\1\u0159\27\13\3\0\1\13"+
    "\1\0\4\13\2\0\1\13\1\0\1\13\25\0\10\13"+
    "\1\u015a\22\13\3\0\1\13\1\0\4\13\2\0\1\13"+
    "\1\0\1\13\25\0\10\13\1\u015b\22\13\3\0\1\13"+
    "\1\0\4\13\2\0\1\13\1\0\1\13\25\0\1\u015c"+
    "\32\13\3\0\1\13\1\0\4\13\2\0\1\13\1\0"+
    "\1\13\25\0\2\13\1\u015d\30\13\3\0\1\13\1\0"+
    "\4\13\2\0\1\13\1\0\1\13\25\0\20\13\1\u015e"+
    "\12\13\3\0\1\13\1\0\4\13\2\0\1\13\1\0"+
    "\1\13\25\0\1\13\1\u015f\31\13\3\0\1\13\1\0"+
    "\4\13\2\0\1\13\1\0\1\13\25\0\3\13\1\u0160"+
    "\27\13\3\0\1\13\1\0\4\13\2\0\1\13\1\0"+
    "\1\13\25\0\3\13\1\u0161\27\13\3\0\1\13\1\0"+
    "\4\13\2\0\1\13\1\0\1\13\25\0\20\13\1\u0162"+
    "\12\13\3\0\1\13\1\0\4\13\2\0\1\13\1\0"+
    "\1\13\25\0\23\13\1\u0163\7\13\3\0\1\13\1\0"+
    "\4\13\2\0\1\13\1\0\1\13\25\0\21\13\1\u0164"+
    "\11\13\3\0\1\13\1\0\4\13\2\0\1\13\1\0"+
    "\1\13\25\0\20\13\1\u0165\12\13\3\0\1\13\1\0"+
    "\4\13\2\0\1\13\1\0\1\13\25\0\17\13\1\u0166"+
    "\13\13\3\0\1\13\1\0\4\13\2\0\1\13\1\0"+
    "\1\13\25\0\16\13\1\u0167\14\13\3\0\1\13\1\0"+
    "\4\13\2\0\1\13\1\0\1\13\25\0\10\13\1\u0168"+
    "\22\13\3\0\1\13\1\0\4\13\2\0\1\13\1\0"+
    "\1\13\25\0\12\13\1\u0169\20\13\3\0\1\13\1\0"+
    "\4\13\2\0\1\13\1\0\1\13\25\0\1\u016a\32\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\10\13\1\u016b\22\13\3\0\1\13\1\0\4\13"+
    "\1\u016c\1\0\1\13\1\0\1\13\25\0\33\13\3\0"+
    "\1\13\1\0\4\13\2\0\1\13\1\0\1\13\25\0"+
    "\3\13\1\u016d\27\13\3\0\1\u016e\2\0\3\u016e\2\0"+
    "\1\u016e\67\0\3\u016e\71\0\1\13\1\0\4\13\2\0"+
    "\1\13\1\0\1\13\25\0\12\13\1\u016f\20\13\3\0"+
    "\1\13\1\0\4\13\2\0\1\13\1\0\1\13\25\0"+
    "\10\13\1\u0170\22\13\3\0\1\13\1\0\4\13\2\0"+
    "\1\13\1\0\1\13\25\0\5\13\1\u0171\25\13\3\0"+
    "\1\13\1\0\4\13\2\0\1\13\1\0\1\13\25\0"+
    "\3\13\1\u0172\27\13\3\0\1\13\1\0\4\13\2\0"+
    "\1\13\1\0\1\13\25\0\24\13\1\u0173\6\13\3\0"+
    "\1\13\1\0\4\13\2\0\1\13\1\0\1\13\25\0"+
    "\16\13\1\u0174\14\13\3\0\1\13\1\0\4\13\2\0"+
    "\1\13\1\0\1\13\25\0\23\13\1\u0175\7\13\3\0"+
    "\1\13\1\0\4\13\2\0\1\13\1\0\1\13\25\0"+
    "\3\13\1\u0176\27\13\3\0\1\13\1\0\4\13\2\0"+
    "\1\13\1\0\1\13\25\0\10\13\1\u0177\22\13\3\0"+
    "\1\13\1\0\4\13\2\0\1\13\1\0\1\13\25\0"+
    "\3\13\1\u0178\27\13\3\0\1\13\1\0\4\13\2\0"+
    "\1\13\1\0\1\13\25\0\23\13\1\u0179\7\13\3\0"+
    "\1\13\1\0\4\13\2\0\1\13\1\0\1\13\25\0"+
    "\16\13\1\u017a\14\13\3\0\1\13\1\0\4\13\1\u017b"+
    "\1\0\1\13\1\0\1\13\25\0\33\13\3\0\1\13"+
    "\1\0\4\13\2\0\1\13\1\0\1\13\25\0\25\13"+
    "\1\u017c\5\13\3\0\1\13\1\0\4\13\2\0\1\13"+
    "\1\0\1\13\25\0\10\13\1\u017d\22\13\3\0\1\13"+
    "\1\0\4\13\2\0\1\13\1\0\1\13\25\0\16\13"+
    "\1\u017e\14\13\3\0\1\13\1\0\4\13\2\0\1\13"+
    "\1\0\1\13\25\0\3\13\1\u017f\27\13\3\0\1\13"+
    "\1\0\4\13\2\0\1\13\1\0\1\13\25\0\10\13"+
    "\1\u0180\22\13\3\0\1\13\1\0\4\13\2\0\1\13"+
    "\1\0\1\13\25\0\3\13\1\u0181\27\13\3\0\1\13"+
    "\1\0\4\13\2\0\1\13\1\0\1\13\25\0\23\13"+
    "\1\u0182\7\13\3\0\1\13\1\0\4\13\2\0\1\13"+
    "\1\0\1\13\25\0\10\13\1\u0183\22\13\3\0\1\13"+
    "\1\0\4\13\2\0\1\13\1\0\1\13\25\0\16\13"+
    "\1\u0184\14\13\3\0\1\13\1\0\4\13\2\0\1\13"+
    "\1\0\1\13\25\0\5\13\1\u0185\25\13\3\0\1\13"+
    "\1\0\4\13\2\0\1\13\1\0\1\13\25\0\10\13"+
    "\1\u0186\22\13\3\0\1\13\1\0\4\13\2\0\1\13"+
    "\1\0\1\13\25\0\12\13\1\u0187\20\13\3\0\1\13"+
    "\1\0\4\13\2\0\1\13\1\0\1\13\25\0\1\u0188"+
    "\32\13\3\0\1\13\1\0\4\13\2\0\1\13\1\0"+
    "\1\13\25\0\23\13\1\u0189\7\13\3\0\1\13\1\0"+
    "\4\13\2\0\1\13\1\0\1\13\25\0\4\13\1\u018a"+
    "\26\13\3\0\1\13\1\0\4\13\2\0\1\13\1\0"+
    "\1\13\25\0\7\13\1\u018b\23\13\3\0\1\13\1\0"+
    "\4\13\2\0\1\13\1\0\1\13\25\0\10\13\1\u018c"+
    "\22\13\3\0\1\13\1\0\4\13\2\0\1\13\1\0"+
    "\1\13\25\0\24\13\1\u018d\6\13\3\0\1\13\1\0"+
    "\4\13\2\0\1\13\1\0\1\13\25\0\3\13\1\u018e"+
    "\27\13\3\0\1\13\1\0\4\13\1\u018f\1\0\1\13"+
    "\1\0\1\13\25\0\33\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\1\u0190\32\13\3\0"+
    "\1\13\1\0\4\13\2\0\1\13\1\0\1\13\25\0"+
    "\14\13\1\u0191\16\13\57\0\1\u0192\5\0\1\u0193\13\0"+
    "\1\13\1\0\4\13\2\0\1\13\1\0\1\13\25\0"+
    "\20\13\1\u0194\12\13\2\0\1\u0195\76\0\1\13\1\0"+
    "\4\13\2\0\1\13\1\0\1\13\25\0\13\13\1\u0196"+
    "\17\13\3\0\1\13\1\0\4\13\2\0\1\13\1\0"+
    "\1\13\25\0\2\13\1\u0197\30\13\3\0\1\13\1\0"+
    "\4\13\2\0\1\13\1\0\1\13\25\0\12\13\1\u0198"+
    "\20\13\3\0\1\13\1\0\4\13\2\0\1\13\1\0"+
    "\1\13\25\0\2\13\1\u0199\30\13\3\0\1\13\1\0"+
    "\4\13\2\0\1\13\1\0\1\13\25\0\2\13\1\u019a"+
    "\30\13\3\0\1\13\1\0\4\13\2\0\1\13\1\0"+
    "\1\13\25\0\20\13\1\u019b\12\13\3\0\1\13\1\0"+
    "\4\13\2\0\1\13\1\0\1\13\25\0\23\13\1\u019c"+
    "\7\13\3\0\1\13\1\0\4\13\2\0\1\13\1\0"+
    "\1\13\25\0\20\13\1\u019d\12\13\3\0\1\13\1\0"+
    "\4\13\2\0\1\13\1\0\1\13\25\0\2\13\1\u019e"+
    "\30\13\45\0\1\u019f\33\0\1\13\1\0\4\13\2\0"+
    "\1\13\1\0\1\13\25\0\10\13\1\u01a0\22\13\3\0"+
    "\1\13\1\0\4\13\2\0\1\13\1\0\1\13\25\0"+
    "\20\13\1\u01a1\12\13\3\0\1\13\1\0\4\13\2\0"+
    "\1\13\1\0\1\13\25\0\23\13\1\u01a2\7\13\3\0"+
    "\1\13\1\0\4\13\2\0\1\13\1\0\1\13\25\0"+
    "\23\13\1\u01a3\7\13\3\0\1\13\1\0\4\13\2\0"+
    "\1\13\1\0\1\13\25\0\10\13\1\u01a4\22\13\3\0"+
    "\1\13\1\0\4\13\2\0\1\13\1\0\1\13\25\0"+
    "\1\u01a5\32\13\3\0\1\13\1\0\4\13\2\0\1\13"+
    "\1\0\1\13\25\0\10\13\1\u01a6\22\13\3\0\1\13"+
    "\1\0\4\13\2\0\1\13\1\0\1\13\25\0\1\u01a7"+
    "\32\13\3\0\1\13\1\0\4\13\2\0\1\13\1\0"+
    "\1\13\25\0\32\13\1\u01a8\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\2\13\1\u01a9\30\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\10\13\1\u01aa\22\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\12\13\1\u01ab\20\13"+
    "\57\0\1\u01ac\5\0\1\u01ad\13\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\16\13\1\u01ae\14\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\10\13\1\u01af\22\13\43\0\1\u01b0\121\0\1\u01b1"+
    "\13\0\1\u01b2\2\u01b3\1\u01b4\70\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\3\13\1\u01b5\27\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\10\13\1\u01b6\22\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\10\13\1\u01b7\22\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\10\13\1\u01b8\22\13\3\0\1\13\1\0\4\13"+
    "\2\0\1\13\1\0\1\13\25\0\12\13\1\u01b9\20\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\12\13\1\u01ba\20\13\44\0\1\u01bb\34\0\1\13"+
    "\1\0\4\13\2\0\1\13\1\0\1\13\25\0\2\13"+
    "\1\u01bc\30\13\3\0\1\13\1\0\4\13\2\0\1\13"+
    "\1\0\1\13\25\0\10\13\1\u01bd\22\13\3\0\1\13"+
    "\1\0\4\13\2\0\1\13\1\0\1\13\25\0\1\13"+
    "\1\u01be\31\13\3\0\1\13\1\0\4\13\2\0\1\13"+
    "\1\0\1\13\25\0\2\13\1\u01bf\30\13\3\0\1\13"+
    "\1\0\4\13\2\0\1\13\1\0\1\13\25\0\17\13"+
    "\1\u01c0\13\13\3\0\1\13\1\0\4\13\2\0\1\13"+
    "\1\0\1\13\25\0\2\13\1\u01c1\30\13\3\0\1\13"+
    "\1\0\4\13\2\0\1\13\1\0\1\13\25\0\10\13"+
    "\1\u01c2\22\13\3\0\1\13\1\0\4\13\2\0\1\13"+
    "\1\0\1\13\25\0\17\13\1\u01c3\13\13\3\0\1\13"+
    "\1\0\4\13\2\0\1\13\1\0\1\13\25\0\20\13"+
    "\1\u01c4\12\13\43\0\1\u01c5\121\0\1\u01c6\63\0\1\u01c7"+
    "\23\0\1\u01c8\2\0\3\u01c8\2\0\1\u01c8\65\0\1\u01c8"+
    "\1\0\4\u01c8\2\0\1\u01c8\67\0\2\u01c8\72\0\1\13"+
    "\1\0\4\13\2\0\1\13\1\0\1\13\25\0\2\13"+
    "\1\u01c9\30\13\3\0\1\13\1\0\4\13\2\0\1\13"+
    "\1\0\1\13\25\0\25\13\1\u01ca\5\13\3\0\1\13"+
    "\1\0\4\13\2\0\1\13\1\0\1\13\25\0\1\13"+
    "\1\u01cb\31\13\3\0\1\13\1\0\4\13\2\0\1\13"+
    "\1\0\1\13\25\0\32\13\1\u01cc\3\0\1\13\1\0"+
    "\4\13\2\0\1\13\1\0\1\13\25\0\17\13\1\u01cd"+
    "\13\13\3\0\1\13\1\0\4\13\2\0\1\13\1\0"+
    "\1\13\25\0\14\13\1\u01ce\16\13\55\0\1\u01cf\112\0"+
    "\1\u01d0\14\0\1\u01d1\67\0\1\13\1\0\4\13\2\0"+
    "\1\13\1\0\1\13\25\0\10\13\1\u01d2\22\13\3\0"+
    "\1\13\1\0\4\13\2\0\1\13\1\0\1\13\25\0"+
    "\10\13\1\u01d3\22\13\3\0\1\13\1\0\4\13\2\0"+
    "\1\13\1\0\1\13\25\0\1\u01d4\32\13\3\0\1\13"+
    "\1\0\4\13\2\0\1\13\1\0\1\13\25\0\10\13"+
    "\1\u01d5\22\13\3\0\1\13\1\0\4\13\2\0\1\13"+
    "\1\0\1\13\25\0\5\13\1\u01d6\25\13\72\0\1\u01d7"+
    "\62\0\1\u01d8\23\0\2\u01d9\1\u01da\71\0\1\13\1\0"+
    "\4\13\1\u01db\1\0\1\13\1\0\1\13\25\0\33\13"+
    "\3\0\1\13\1\0\4\13\2\0\1\13\1\0\1\13"+
    "\25\0\10\13\1\u01dc\22\13\57\0\1\u01dd\71\0\1\u01de"+
    "\25\0\1\u01df\1\0\4\u01df\2\0\1\u01df\67\0\4\u01df"+
    "\132\0\1\u01e0\103\0\1\u01e1\33\0\1\u01e2\76\0\1\u01e3"+
    "\127\0\1\u01e4\42\0\1\u01e5\151\0\1\u01e6\15\0\4\u01e7"+
    "\2\0\1\u01e7\147\0\1\u01e8\77\0\1\u01e9\11\0\1\u01ea"+
    "\1\0\4\u01ea\2\0\1\u01ea\151\0\1\u01eb\20\0\1\u01ec"+
    "\70\0\4\u01ed\2\0\1\u01ed\65\0\1\u01ee\1\0\4\u01ee"+
    "\2\0\1\u01ee\66\0\1\u01ef\74\0\1\u01f0\1\0\4\u01f0"+
    "\2\0\1\u01f0\65\0\1\u01f1\1\0\4\u01f1\2\0\1\u01f1"+
    "\65\0\1\u01f2\1\0\4\u01f2\2\0\1\u01f2\63\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  0,  0,  9,  1,  1,  1,  9,  1,  1,  1,  1,  9,  9,  9, 
     9,  9,  9,  9,  9,  9,  9,  1,  1,  9,  9,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     9,  9,  9,  1,  9,  1,  1,  0,  1,  1,  9,  9,  1,  9,  9,  9, 
     9,  9,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  0,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1, 
     1,  0,  0,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  1,  1,  0, 
     9,  0,  0,  0,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  0,  9,  0,  1,  1,  1,  1,  1,  1,  1,  0,  0, 
     0,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0, 
     0,  0,  0,  9,  0,  0,  0,  0,  9,  1,  9,  0,  0,  1,  0,  1, 
     1,  9
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	private StringBuffer str;
	public String module = "";

	public SBQLLexer(java.io.Reader in, String mod) {
		this.yy_reader = in;
		module = mod;
	}

	public SBQLLexer(java.io.InputStream in, String mod) {	
		this(new java.io.InputStreamReader(in));
		module = mod;
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SBQLLexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public SBQLLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[23746];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 144) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) throws ParserException {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new ParserException(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  throws ParserException {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException, ParserException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 475: 
          {  return new Token(yyline, yycolumn, Symbols.LAZY_FAILURE, "lazy_failure");  }
        case 499: break;
        case 7: 
          {  return new Token(yyline, yycolumn, Symbols.DOT, ".");  }
        case 500: break;
        case 4: 
        case 27: 
          {  throw new ParserException("Illegal character '" + yytext() + "'.", module, yyline + 1, yycolumn + 1);  }
        case 501: break;
        case 70: 
          {  return new Token(yyline, yycolumn, Symbols.OR, "or");  }
        case 502: break;
        case 77: 
          {  return new Token(yyline, yycolumn, Symbols.AS, "as");  }
        case 503: break;
        case 80: 
          {  return new Token(yyline, yycolumn, Symbols.DO, "do");  }
        case 504: break;
        case 91: 
          {  return new Token(yyline, yycolumn, Symbols.IN, "in");  }
        case 505: break;
        case 92: 
          {  return new Token(yyline, yycolumn, Symbols.IS, "is");  }
        case 506: break;
        case 93: 
          {  return new Token(yyline, yycolumn, Symbols.IF, "if");  }
        case 507: break;
        case 362: 
          {  return new Token(yyline, yycolumn, Symbols.CREATE, "create");  }
        case 508: break;
        case 359: 
          {  return new Token(yyline, yycolumn, Symbols.MODULE, "module");  }
        case 509: break;
        case 353: 
          {  return new Token(yyline, yycolumn, Symbols.FORALL, "forall");  }
        case 510: break;
        case 348: 
          {  return new Token(yyline, yycolumn, Symbols.STRUCT, "struct");  }
        case 511: break;
        case 346: 
          {  return new Token(yyline, yycolumn, Symbols.UPDATE, "update");  }
        case 512: break;
        case 345: 
          {  return new Token(yyline, yycolumn, Symbols.UNIQUE, "unique");  }
        case 513: break;
        case 342: 
          {  return new Token(yyline, yycolumn, Symbols.IMPORT, "import");  }
        case 514: break;
        case 338: 
          {  return new Token(yyline, yycolumn, Symbols.EXISTS, "exists");  }
        case 515: break;
        case 334: 
          {  return new Token(yyline, yycolumn, Symbols.RECORD, "record");  }
        case 516: break;
        case 333: 
          {  return new Token(yyline, yycolumn, Symbols.RETURN, "return");  }
        case 517: break;
        case 329: 
          {  return new Token(yyline, yycolumn, Symbols.RANDOM, "random");  }
        case 518: break;
        case 327: 
          {  return new Token(yyline, yycolumn, Symbols.DELETE, "delete");  }
        case 519: break;
        case 317: 
          {  return new Token(yyline, yycolumn, Symbols.ON_NEW, "on_new");  }
        case 520: break;
        case 65: 
          {  return new Token(yyline, yycolumn, Symbols.DIFFERENT, "<>");  }
        case 521: break;
        case 455: 
        case 489: 
        case 493: 
        case 495: 
        case 496: 
        case 497: 
          {  	
						String dateval = yytext();
						
						Date val;
						try {
							val = DateUtils.parseDatetime(dateval);
						}
						catch (Exception e) {
							throw new ParserException(e.getMessage(), module, yyline + 1, yycolumn + 1);
						}

						return new Token(yyline, yycolumn, Symbols.DATE_LITERAL, val); 
					 }
        case 522: break;
        case 490: 
          {  return new Token(yyline, yycolumn, Symbols.LEAVESUNIQUEBY, "leaves unique by");  }
        case 523: break;
        case 467: 
          {  return new Token(yyline, yycolumn, Symbols.TRANSACTION_CAPABLE, "transaction");  }
        case 524: break;
        case 60: 
          {  return new Token(yyline, yycolumn, Symbols.INSERT, ":<");  }
        case 525: break;
        case 59: 
          {  return new Token(yyline, yycolumn, Symbols.ASSIGN, ":=");  }
        case 526: break;
        case 58: 
          {  return new Token(yyline, yycolumn, Symbols.DOTDOT, "..");  }
        case 527: break;
        case 26: 
          {  return new Token(yyline, yycolumn, Symbols.RSQUARE, "]");  }
        case 528: break;
        case 25: 
          {  return new Token(yyline, yycolumn, Symbols.LSQUARE, "[");  }
        case 529: break;
        case 23: 
          {  return new Token(yyline, yycolumn, Symbols.GREATER, ">");  }
        case 530: break;
        case 22: 
          {  return new Token(yyline, yycolumn, Symbols.EQUALS, "=");  }
        case 531: break;
        case 12: 
          {  return new Token(yyline, yycolumn, Symbols.DIVIDE, "/");  }
        case 532: break;
        case 5: 
          {  return new Token(yyline, yycolumn, Symbols.HYPHEN, "-");  }
        case 533: break;
        case 16: 
          {  return new Token(yyline, yycolumn, Symbols.MODULO, "%");  }
        case 534: break;
        case 17: 
          {  return new Token(yyline, yycolumn, Symbols.LPAREN, "(");  }
        case 535: break;
        case 18: 
          {  return new Token(yyline, yycolumn, Symbols.RPAREN, ")");  }
        case 536: break;
        case 19: 
          {  return new Token(yyline, yycolumn, Symbols.LCURLY, "{");  }
        case 537: break;
        case 20: 
          {  return new Token(yyline, yycolumn, Symbols.RCURLY, "}");  }
        case 538: break;
        case 195: 
          {  return new Token(yyline, yycolumn, Symbols.BOOLEAN_LITERAL, new Boolean(true));  }
        case 539: break;
        case 197: 
          {  return new Token(yyline, yycolumn, Symbols.THEN, "then");  }
        case 540: break;
        case 199: 
          {  return new Token(yyline, yycolumn, Symbols.TYPE, "type");  }
        case 541: break;
        case 215: 
          {  return new Token(yyline, yycolumn, Symbols.ENUM, "enum");  }
        case 542: break;
        case 216: 
          {  return new Token(yyline, yycolumn, Symbols.ELSE, "else");  }
        case 543: break;
        case 219: 
          {  return new Token(yyline, yycolumn, Symbols.JOIN, "join");  }
        case 544: break;
        case 231: 
          {  return new Token(yyline, yycolumn, Symbols.SEED, "seed");  }
        case 545: break;
        case 252: 
          {  return new Token(yyline, yycolumn, Symbols.VIEW, "view");  }
        case 546: break;
        case 449: 
          {  return new Token(yyline, yycolumn, Symbols.SEROID, "serialize");  }
        case 547: break;
        case 442: 
          {  return new Token(yyline, yycolumn, Symbols.RENAME, "rename to");  }
        case 548: break;
        case 432: 
          {  return new Token(yyline, yycolumn, Symbols.CLOSEBY, "close by");  }
        case 549: break;
        case 430: 
          {  return new Token(yyline, yycolumn, Symbols.CONTINUE, "continue");  }
        case 550: break;
        case 429: 
          {  return new Token(yyline, yycolumn, Symbols.CONTAINS, "contains");  }
        case 551: break;
        case 424: 
          {  return new Token(yyline, yycolumn, Symbols.SUBTRACT, "subtract");  }
        case 552: break;
        case 419: 
          {  return new Token(yyline, yycolumn, Symbols.INSTANCE, "instance");  }
        case 553: break;
        case 416: 
          {  return new Token(yyline, yycolumn, Symbols.EXTERNAL, "external");  }
        case 554: break;
        case 415: 
          {  return new Token(yyline, yycolumn, Symbols.RETRIEVE, "retrieve");  }
        case 555: break;
        case 413: 
          {  return new Token(yyline, yycolumn, Symbols.DISTINCT, "distinct");  }
        case 556: break;
        case 411: 
          {  return new Token(yyline, yycolumn, Symbols.DATEPREC, "dateprec");  }
        case 557: break;
        case 410: 
          {  return new Token(yyline, yycolumn, Symbols.TEMPORAL, "temporal");  }
        case 558: break;
        case 377: 
          {  return new Token(yyline, yycolumn, Symbols.RANGEAS, "range as");  }
        case 559: break;
        case 63: 
          {  return new Token(yyline, yycolumn, Symbols.GREATEREQUALS, ">=");  }
        case 560: break;
        case 403: 
          {  return new Token(yyline, yycolumn, Symbols.VIRTUAL, "virtual");  }
        case 561: break;
        case 396: 
          {  return new Token(yyline, yycolumn, Symbols.FINALLY, "finally");  }
        case 562: break;
        case 395: 
          {  return new Token(yyline, yycolumn, Symbols.FORSOME, "forsome");  }
        case 563: break;
        case 394: 
          {  return new Token(yyline, yycolumn, Symbols.FOREACH, "foreach");  }
        case 564: break;
        case 391: 
          {  return new Token(yyline, yycolumn, Symbols.SESSION, "session");  }
        case 565: break;
        case 387: 
          {  return new Token(yyline, yycolumn, Symbols.GROUPAS, "groupas");  }
        case 566: break;
        case 381: 
          {  return new Token(yyline, yycolumn, Symbols.EXTENDS, "extends");  }
        case 567: break;
        case 380: 
          {  return new Token(yyline, yycolumn, Symbols.REVERSE, "reverse");  }
        case 568: break;
        case 371: 
          {  return new Token(yyline, yycolumn, Symbols.OBJECTS, "objects");  }
        case 569: break;
        case 370: 
          {  return new Token(yyline, yycolumn, Symbols.ORDERBY, "orderby");  }
        case 570: break;
        case 64: 
          {  return new Token(yyline, yycolumn, Symbols.LOWEREQUALS, "<=");  }
        case 571: break;
        case 66: 
          {  return new Token(yyline, yycolumn, Symbols.MATCH_STRING, "~~");  }
        case 572: break;
        case 120: 
          {  return new Token(yyline, yycolumn, Symbols.INSERTCOPY, ":<<");  }
        case 573: break;
        case 312: 
          {  return new Token(yyline, yycolumn, Symbols.CLASS, "class");  }
        case 574: break;
        case 309: 
          {  return new Token(yyline, yycolumn, Symbols.CATCH, "catch");  }
        case 575: break;
        case 308: 
          {  return new Token(yyline, yycolumn, Symbols.COUNT, "count");  }
        case 576: break;
        case 305: 
          {  return new Token(yyline, yycolumn, Symbols.BREAK, "break");  }
        case 577: break;
        case 301: 
          {  return new Token(yyline, yycolumn, Symbols.LOCAL, "local");  }
        case 578: break;
        case 14: 
          {  return new Token(yyline, yycolumn, Symbols.SEMICOLON, ";");  }
        case 579: break;
        case 262: 
          {  return new Token(yyline, yycolumn, Symbols.THROW, "throw");  }
        case 580: break;
        case 266: 
          {  return new Token(yyline, yycolumn, Symbols.DEREF, "deref");  }
        case 581: break;
        case 277: 
          {  return new Token(yyline, yycolumn, Symbols.WHERE, "where");  }
        case 582: break;
        case 278: 
          {  return new Token(yyline, yycolumn, Symbols.WHILE, "while");  }
        case 583: break;
        case 287: 
          {  return new Token(yyline, yycolumn, Symbols.UNION, "union");  }
        case 584: break;
        case 299: 
          {  return new Token(yyline, yycolumn, Symbols.BOOLEAN_LITERAL, new Boolean(false));  }
        case 585: break;
        case 49: 
          {  str.append(yytext()); break;  }
        case 586: break;
        case 50: 
          {  yybegin(YYINITIAL); return new Token(yyline, yycolumn, Symbols.STRING_LITERAL, str.toString());  }
        case 587: break;
        case 24: 
          {  return new Token(yyline, yycolumn, Symbols.LOWER, "<");  }
        case 588: break;
        case 9: 
          {  return new Token(yyline, yycolumn, Symbols.COLON, ":");  }
        case 589: break;
        case 13: 
          {  return new Token(yyline, yycolumn, Symbols.TIMES, "*");  }
        case 590: break;
        case 15: 
          {  return new Token(yyline, yycolumn, Symbols.PLUS, "+");  }
        case 591: break;
        case 21: 
          {  return new Token(yyline, yycolumn, Symbols.COMMA, ",");  }
        case 592: break;
        case 121: 
          {  return new Token(yyline, yycolumn, Symbols.NOT, "not");  }
        case 593: break;
        case 122: 
          {  return new Token(yyline, yycolumn, Symbols.NOW, "now");  }
        case 594: break;
        case 128: 
          {  return new Token(yyline, yycolumn, Symbols.TRY, "try");  }
        case 595: break;
        case 133: 
          {  return new Token(yyline, yycolumn, Symbols.AND, "and");  }
        case 596: break;
        case 135: 
          {  return new Token(yyline, yycolumn, Symbols.AVG, "avg");  }
        case 597: break;
        case 144: 
          {  return new Token(yyline, yycolumn, Symbols.REF, "ref");  }
        case 598: break;
        case 165: 
          {  return new Token(yyline, yycolumn, Symbols.SUM, "sum");  }
        case 599: break;
        case 168: 
          {  return new Token(yyline, yycolumn, Symbols.FOR, "for");  }
        case 600: break;
        case 175: 
          {  return new Token(yyline, yycolumn, Symbols.MAX, "max");  }
        case 601: break;
        case 176: 
          {  return new Token(yyline, yycolumn, Symbols.MIN, "min");  }
        case 602: break;
        case 177: 
          {  return new Token(yyline, yycolumn, Symbols.BAG, "bag");  }
        case 603: break;
        case 488: 
          {  return new Token(yyline, yycolumn, Symbols.CLOSEUNIQUEBY, "close unique by");  }
        case 604: break;
        case 53: 
          {  break;  }
        case 605: break;
        case 8: 
        case 11: 
          {  break;  }
        case 606: break;
        case 51: 
        case 52: 
          {  yybegin(YYINITIAL);  }
        case 607: break;
        case 10: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 68: 
        case 69: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 78: 
        case 79: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 134: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 166: 
        case 167: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 196: 
        case 198: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 217: 
        case 218: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 254: 
        case 255: 
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 263: 
        case 265: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 279: 
        case 280: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 285: 
        case 286: 
        case 288: 
        case 289: 
        case 290: 
        case 291: 
        case 292: 
        case 293: 
        case 294: 
        case 295: 
        case 296: 
        case 297: 
        case 298: 
        case 300: 
        case 302: 
        case 303: 
        case 304: 
        case 306: 
        case 307: 
        case 310: 
        case 311: 
        case 313: 
        case 316: 
        case 318: 
        case 319: 
        case 320: 
        case 321: 
        case 322: 
        case 323: 
        case 324: 
        case 325: 
        case 326: 
        case 328: 
        case 330: 
        case 331: 
        case 332: 
        case 335: 
        case 336: 
        case 337: 
        case 339: 
        case 340: 
        case 341: 
        case 343: 
        case 344: 
        case 347: 
        case 349: 
        case 350: 
        case 351: 
        case 352: 
        case 354: 
        case 355: 
        case 356: 
        case 357: 
        case 358: 
        case 360: 
        case 361: 
        case 364: 
        case 366: 
        case 367: 
        case 368: 
        case 369: 
        case 372: 
        case 373: 
        case 374: 
        case 375: 
        case 376: 
        case 379: 
        case 382: 
        case 383: 
        case 384: 
        case 385: 
        case 386: 
        case 388: 
        case 389: 
        case 390: 
        case 392: 
        case 393: 
        case 397: 
        case 399: 
        case 400: 
        case 405: 
        case 406: 
        case 407: 
        case 408: 
        case 409: 
        case 412: 
        case 417: 
        case 418: 
        case 420: 
        case 421: 
        case 422: 
        case 423: 
        case 425: 
        case 426: 
        case 436: 
        case 438: 
        case 440: 
        case 441: 
        case 445: 
        case 451: 
        case 456: 
        case 457: 
        case 458: 
        case 459: 
        case 461: 
        case 468: 
        case 469: 
          { 
						return new Token(yyline, yycolumn, Symbols.NAME, yytext());
					 }
        case 608: break;
        case 483: 
          {  return new Token(yyline, yycolumn, Symbols.DESEROID, "deserialize to");  }
        case 609: break;
        case 466: 
          {  return new Token(yyline, yycolumn, Symbols.ON_RETRIEVE, "on_retrieve");  }
        case 610: break;
        case 465: 
          {  return new Token(yyline, yycolumn, Symbols.ON_NAVIGATE, "on_navigate");  }
        case 611: break;
        case 264: 
          {  return new Token(yyline, yycolumn, Symbols.TRANSACTION_ABORT, "abort");  }
        case 612: break;
        case 62: 
          {  yybegin(BLOCKCOMMENT); break;  }
        case 613: break;
        case 61: 
          {  yybegin(LINECOMMENT); break;  }
        case 614: break;
        case 6: 
        case 54: 
        case 56: 
        case 119: 
        case 187: 
          { 
						String intval = yytext();
						if (intval.charAt(0) == '-') 
							intval = "-".concat(intval.substring(1).trim());

						int val;
						try {
							val = Integer.parseInt(intval);
						}
						catch (Exception e) {
							throw new ParserException(e.getMessage(), module, yyline + 1, yycolumn + 1);
						}
						
						return new Token(yyline, yycolumn, Symbols.INTEGER_LITERAL, new Integer(val)); 
					 }
        case 615: break;
        case 48: 
          {  str = new StringBuffer(); yybegin(STRING); break;  }
        case 616: break;
        case 453: 
          {  return new Token(yyline, yycolumn, Symbols.LEAVESBY, "leaves by");  }
        case 617: break;
        case 450: 
          {  return new Token(yyline, yycolumn, Symbols.SCHEMADEF, "schemadef");  }
        case 618: break;
        case 448: 
          {  return new Token(yyline, yycolumn, Symbols.PERMANENT, "permanent");  }
        case 619: break;
        case 447: 
          {  return new Token(yyline, yycolumn, Symbols.UNIQUEREF, "uniqueref");  }
        case 620: break;
        case 446: 
          {  return new Token(yyline, yycolumn, Symbols.IMPLEMENT, "implement");  }
        case 621: break;
        case 444: 
          {  return new Token(yyline, yycolumn, Symbols.INTERFACE, "interface");  }
        case 622: break;
        case 443: 
          {  return new Token(yyline, yycolumn, Symbols.INTERSECT, "intersect");  }
        case 623: break;
        case 439: 
          {  return new Token(yyline, yycolumn, Symbols.ON_UPDATE, "on_update");  }
        case 624: break;
        case 437: 
          {  return new Token(yyline, yycolumn, Symbols.ON_DELETE, "on_delete");  }
        case 625: break;
        case 67: 
          {  return new Token(yyline, yycolumn, Symbols.NOT_MATCH_STRING, "~!");  }
        case 626: break;
        case 460: 
          {  return new Token(yyline, yycolumn, Symbols.INSTANCEOF, "instanceof");  }
        case 627: break;
        case 57: 
          {  	
						String realval = yytext();
						if (realval.charAt(0) == '-') 
							realval = "-".concat(realval.substring(1).trim());
						
						double val;
						try {
							val = Double.parseDouble(realval);
						}
						catch (Exception e) {
							throw new ParserException(e.getMessage(), module, yyline + 1, yycolumn + 1);
						}

						return new Token(yyline, yycolumn, Symbols.DOUBLE_LITERAL, new Double(val)); 
					 }
        case 628: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              { 	return new Token(yyline, yycolumn, Symbols.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
